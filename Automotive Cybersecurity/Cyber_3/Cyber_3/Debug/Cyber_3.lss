
Cyber_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000012fa  0000138e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008000c0  008000c0  000013ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002462  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d32  00000000  00000000  00003b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f3  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00005b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a62  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c1f  00000000  00000000  00006d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00008939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
       4:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_1>
       8:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_2>
       c:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_3>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      28:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__vector_10>
      2c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_11>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_13>
      38:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__vector_14>
      3c:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_15>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	01 02       	muls	r16, r17
      56:	0b 02       	muls	r16, r27
      58:	15 02       	muls	r17, r21
      5a:	1f 02       	muls	r17, r31
      5c:	29 02       	muls	r18, r25
      5e:	33 02       	muls	r19, r19
      60:	3d 02       	muls	r19, r29
      62:	3d 02       	muls	r19, r29
      64:	3d 02       	muls	r19, r29
      66:	3d 02       	muls	r19, r29
      68:	3d 02       	muls	r19, r29
      6a:	3d 02       	muls	r19, r29
      6c:	3d 02       	muls	r19, r29
      6e:	3d 02       	muls	r19, r29
      70:	3d 02       	muls	r19, r29
      72:	3d 02       	muls	r19, r29
      74:	3d 02       	muls	r19, r29
      76:	3d 02       	muls	r19, r29
      78:	3d 02       	muls	r19, r29
      7a:	3d 02       	muls	r19, r29
      7c:	3d 02       	muls	r19, r29
      7e:	3d 02       	muls	r19, r29
      80:	3d 02       	muls	r19, r29
      82:	3d 02       	muls	r19, r29
      84:	3d 02       	muls	r19, r29
      86:	3d 02       	muls	r19, r29
      88:	3d 02       	muls	r19, r29
      8a:	3d 02       	muls	r19, r29
      8c:	3d 02       	muls	r19, r29
      8e:	3d 02       	muls	r19, r29
      90:	3d 02       	muls	r19, r29
      92:	3d 02       	muls	r19, r29
      94:	06 02       	muls	r16, r22
      96:	10 02       	muls	r17, r16
      98:	1a 02       	muls	r17, r26
      9a:	24 02       	muls	r18, r20
      9c:	2e 02       	muls	r18, r30
      9e:	38 02       	muls	r19, r24

000000a0 <__ctors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf e5       	ldi	r28, 0x5F	; 95
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	10 e0       	ldi	r17, 0x00	; 0
      ae:	a0 e6       	ldi	r26, 0x60	; 96
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	ea ef       	ldi	r30, 0xFA	; 250
      b4:	f2 e1       	ldi	r31, 0x12	; 18
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a0 3c       	cpi	r26, 0xC0	; 192
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	a0 ec       	ldi	r26, 0xC0	; 192
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a2 30       	cpi	r26, 0x02	; 2
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
      d6:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <_exit>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <SendInstruction>:
	}
	for (j=i;j>0;j--)
	{
		LCD_WriteChar(str[j-1]);
	}
}
      de:	cf 93       	push	r28
      e0:	c8 2f       	mov	r28, r24
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	83 e1       	ldi	r24, 0x13	; 19
      e6:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
      ea:	c4 fb       	bst	r28, 4
      ec:	66 27       	eor	r22, r22
      ee:	60 f9       	bld	r22, 0
      f0:	80 e2       	ldi	r24, 0x20	; 32
      f2:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
      f6:	c5 fb       	bst	r28, 5
      f8:	66 27       	eor	r22, r22
      fa:	60 f9       	bld	r22, 0
      fc:	81 e2       	ldi	r24, 0x21	; 33
      fe:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     102:	c6 fb       	bst	r28, 6
     104:	66 27       	eor	r22, r22
     106:	60 f9       	bld	r22, 0
     108:	82 e2       	ldi	r24, 0x22	; 34
     10a:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     10e:	6c 2f       	mov	r22, r28
     110:	66 1f       	adc	r22, r22
     112:	66 27       	eor	r22, r22
     114:	66 1f       	adc	r22, r22
     116:	83 e2       	ldi	r24, 0x23	; 35
     118:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	82 e1       	ldi	r24, 0x12	; 18
     120:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     124:	89 ef       	ldi	r24, 0xF9	; 249
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	01 97       	sbiw	r24, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <SendInstruction+0x4a>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <SendInstruction+0x50>
     12e:	00 00       	nop
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	82 e1       	ldi	r24, 0x12	; 18
     134:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     138:	89 ef       	ldi	r24, 0xF9	; 249
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <SendInstruction+0x5e>
     140:	00 c0       	rjmp	.+0      	; 0x142 <SendInstruction+0x64>
     142:	00 00       	nop
     144:	6c 2f       	mov	r22, r28
     146:	61 70       	andi	r22, 0x01	; 1
     148:	80 e2       	ldi	r24, 0x20	; 32
     14a:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     14e:	c1 fb       	bst	r28, 1
     150:	66 27       	eor	r22, r22
     152:	60 f9       	bld	r22, 0
     154:	81 e2       	ldi	r24, 0x21	; 33
     156:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     15a:	c2 fb       	bst	r28, 2
     15c:	66 27       	eor	r22, r22
     15e:	60 f9       	bld	r22, 0
     160:	82 e2       	ldi	r24, 0x22	; 34
     162:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     166:	c3 fb       	bst	r28, 3
     168:	66 27       	eor	r22, r22
     16a:	60 f9       	bld	r22, 0
     16c:	83 e2       	ldi	r24, 0x23	; 35
     16e:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	82 e1       	ldi	r24, 0x12	; 18
     176:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     17a:	89 ef       	ldi	r24, 0xF9	; 249
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <SendInstruction+0xa0>
     182:	00 c0       	rjmp	.+0      	; 0x184 <SendInstruction+0xa6>
     184:	00 00       	nop
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	82 e1       	ldi	r24, 0x12	; 18
     18a:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     18e:	89 ef       	ldi	r24, 0xF9	; 249
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <SendInstruction+0xb4>
     196:	00 c0       	rjmp	.+0      	; 0x198 <SendInstruction+0xba>
     198:	00 00       	nop
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <SendData>:
     19e:	cf 93       	push	r28
     1a0:	c8 2f       	mov	r28, r24
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	83 e1       	ldi	r24, 0x13	; 19
     1a6:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1aa:	c4 fb       	bst	r28, 4
     1ac:	66 27       	eor	r22, r22
     1ae:	60 f9       	bld	r22, 0
     1b0:	80 e2       	ldi	r24, 0x20	; 32
     1b2:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1b6:	c5 fb       	bst	r28, 5
     1b8:	66 27       	eor	r22, r22
     1ba:	60 f9       	bld	r22, 0
     1bc:	81 e2       	ldi	r24, 0x21	; 33
     1be:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1c2:	c6 fb       	bst	r28, 6
     1c4:	66 27       	eor	r22, r22
     1c6:	60 f9       	bld	r22, 0
     1c8:	82 e2       	ldi	r24, 0x22	; 34
     1ca:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1ce:	6c 2f       	mov	r22, r28
     1d0:	66 1f       	adc	r22, r22
     1d2:	66 27       	eor	r22, r22
     1d4:	66 1f       	adc	r22, r22
     1d6:	83 e2       	ldi	r24, 0x23	; 35
     1d8:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	82 e1       	ldi	r24, 0x12	; 18
     1e0:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1e4:	89 ef       	ldi	r24, 0xF9	; 249
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SendData+0x4a>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <SendData+0x50>
     1ee:	00 00       	nop
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	82 e1       	ldi	r24, 0x12	; 18
     1f4:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     1f8:	89 ef       	ldi	r24, 0xF9	; 249
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <SendData+0x5e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <SendData+0x64>
     202:	00 00       	nop
     204:	6c 2f       	mov	r22, r28
     206:	61 70       	andi	r22, 0x01	; 1
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     20e:	c1 fb       	bst	r28, 1
     210:	66 27       	eor	r22, r22
     212:	60 f9       	bld	r22, 0
     214:	81 e2       	ldi	r24, 0x21	; 33
     216:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     21a:	c2 fb       	bst	r28, 2
     21c:	66 27       	eor	r22, r22
     21e:	60 f9       	bld	r22, 0
     220:	82 e2       	ldi	r24, 0x22	; 34
     222:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     226:	c3 fb       	bst	r28, 3
     228:	66 27       	eor	r22, r22
     22a:	60 f9       	bld	r22, 0
     22c:	83 e2       	ldi	r24, 0x23	; 35
     22e:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	82 e1       	ldi	r24, 0x12	; 18
     236:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     23a:	89 ef       	ldi	r24, 0xF9	; 249
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <SendData+0xa0>
     242:	00 c0       	rjmp	.+0      	; 0x244 <SendData+0xa6>
     244:	00 00       	nop
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	82 e1       	ldi	r24, 0x12	; 18
     24a:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     24e:	89 ef       	ldi	r24, 0xF9	; 249
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <SendData+0xb4>
     256:	00 c0       	rjmp	.+0      	; 0x258 <SendData+0xba>
     258:	00 00       	nop
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <LCD_Init>:
     25e:	83 ed       	ldi	r24, 0xD3	; 211
     260:	90 e3       	ldi	r25, 0x30	; 48
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <LCD_Init+0x4>
     266:	00 c0       	rjmp	.+0      	; 0x268 <LCD_Init+0xa>
     268:	00 00       	nop
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     270:	88 e2       	ldi	r24, 0x28	; 40
     272:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     276:	8c e0       	ldi	r24, 0x0C	; 12
     278:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     282:	89 ef       	ldi	r24, 0xF9	; 249
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_Init+0x28>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_Init+0x2e>
     28c:	00 00       	nop
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     294:	83 ef       	ldi	r24, 0xF3	; 243
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_Init+0x3a>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_Init+0x40>
     29e:	00 00       	nop
     2a0:	08 95       	ret

000002a2 <LCD_WriteChar>:
     2a2:	0e 94 cf 00 	call	0x19e	; 0x19e <SendData>
     2a6:	08 95       	ret

000002a8 <LCD_WriteString>:
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
     2ae:	88 81       	ld	r24, Y
     2b0:	88 23       	and	r24, r24
     2b2:	31 f0       	breq	.+12     	; 0x2c0 <LCD_WriteString+0x18>
     2b4:	21 96       	adiw	r28, 0x01	; 1
     2b6:	0e 94 cf 00 	call	0x19e	; 0x19e <SendData>
     2ba:	89 91       	ld	r24, Y+
     2bc:	81 11       	cpse	r24, r1
     2be:	fb cf       	rjmp	.-10     	; 0x2b6 <LCD_WriteString+0xe>
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <LCD_ClearDisplay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c6:	89 ef       	ldi	r24, 0xF9	; 249
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_ClearDisplay+0x4>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_ClearDisplay+0xa>
     2d0:	00 00       	nop

/// @brief
/// @param num
void LCD_ClearDisplay() {
	_delay_ms(1); 
	SendInstruction(0x01);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     2d8:	83 ed       	ldi	r24, 0xD3	; 211
     2da:	90 e3       	ldi	r25, 0x30	; 48
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_ClearDisplay+0x16>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_ClearDisplay+0x1c>
     2e2:	00 00       	nop
     2e4:	08 95       	ret

000002e6 <LCD_GoTo_xy>:
	_delay_ms(50);
	 }

void LCD_GoTo_xy(u8 x_position, u8 y_position) {
	u8 Local_u8address;
	switch(x_position)
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	49 f0       	breq	.+18     	; 0x2fc <LCD_GoTo_xy+0x16>
     2ea:	28 f0       	brcs	.+10     	; 0x2f6 <LCD_GoTo_xy+0x10>
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	49 f0       	breq	.+18     	; 0x302 <LCD_GoTo_xy+0x1c>
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	51 f0       	breq	.+20     	; 0x308 <LCD_GoTo_xy+0x22>
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <LCD_GoTo_xy+0x26>
	{
		case 0:
		Local_u8address = y_position + (0x80);
     2f6:	90 e8       	ldi	r25, 0x80	; 128
     2f8:	96 0f       	add	r25, r22
		break;
     2fa:	08 c0       	rjmp	.+16     	; 0x30c <LCD_GoTo_xy+0x26>
		case 1:
		Local_u8address = y_position + (0xc0);
     2fc:	90 ec       	ldi	r25, 0xC0	; 192
     2fe:	96 0f       	add	r25, r22
		break;
     300:	05 c0       	rjmp	.+10     	; 0x30c <LCD_GoTo_xy+0x26>
		case 2:
		Local_u8address = y_position + (0x94);
     302:	94 e9       	ldi	r25, 0x94	; 148
     304:	96 0f       	add	r25, r22
		break;
     306:	02 c0       	rjmp	.+4      	; 0x30c <LCD_GoTo_xy+0x26>
		case 3:
		Local_u8address = y_position + (0xd4);
     308:	94 ed       	ldi	r25, 0xD4	; 212
     30a:	96 0f       	add	r25, r22
		break;
		default:
		break;
	}
	SendInstruction(Local_u8address);
     30c:	89 2f       	mov	r24, r25
     30e:	0e 94 6f 00 	call	0xde	; 0xde <SendInstruction>
     312:	08 95       	ret

00000314 <decimalToHex>:
#include "MCAL/TIMERS/TIMER0/TIMER0_interface.h"

#include "HAL/LCD/LCD_interface.h"
#include <util/delay.h>

void decimalToHex(u8 decimalNumber, u8 hexNumber[]) {
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
	if (decimalNumber == 0) {
     31a:	81 11       	cpse	r24, r1
     31c:	07 c0       	rjmp	.+14     	; 0x32c <decimalToHex+0x18>
		sprintf(hexNumber, "00");
     31e:	80 e3       	ldi	r24, 0x30	; 48
     320:	90 e3       	ldi	r25, 0x30	; 48
     322:	fb 01       	movw	r30, r22
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24
     328:	12 82       	std	Z+2, r1	; 0x02
		return;
     32a:	32 c0       	rjmp	.+100    	; 0x390 <decimalToHex+0x7c>
     32c:	8b 01       	movw	r16, r22
     32e:	c8 2f       	mov	r28, r24
	}
	// Convert decimal to hex
	if(decimalNumber >= 16)
     330:	80 31       	cpi	r24, 0x10	; 16
     332:	88 f0       	brcs	.+34     	; 0x356 <decimalToHex+0x42>
	{
		sprintf(hexNumber, "%X", decimalNumber);
     334:	1f 92       	push	r1
     336:	8f 93       	push	r24
     338:	8c e7       	ldi	r24, 0x7C	; 124
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 93       	push	r17
     342:	6f 93       	push	r22
     344:	0e 94 91 06 	call	0xd22	; 0xd22 <sprintf>
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	1d c0       	rjmp	.+58     	; 0x390 <decimalToHex+0x7c>
	}
	else
	{
		sprintf(hexNumber[0], '0');
     356:	1f 92       	push	r1
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	8f 93       	push	r24
     35c:	fb 01       	movw	r30, r22
     35e:	80 81       	ld	r24, Z
     360:	1f 92       	push	r1
     362:	8f 93       	push	r24
     364:	0e 94 91 06 	call	0xd22	; 0xd22 <sprintf>
		sprintf(hexNumber[1], "%X", decimalNumber);
     368:	1f 92       	push	r1
     36a:	cf 93       	push	r28
     36c:	8c e7       	ldi	r24, 0x7C	; 124
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	f8 01       	movw	r30, r16
     376:	81 81       	ldd	r24, Z+1	; 0x01
     378:	1f 92       	push	r1
     37a:	8f 93       	push	r24
     37c:	0e 94 91 06 	call	0xd22	; 0xd22 <sprintf>
     380:	8d b7       	in	r24, 0x3d	; 61
     382:	9e b7       	in	r25, 0x3e	; 62
     384:	0a 96       	adiw	r24, 0x0a	; 10
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	9e bf       	out	0x3e, r25	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	8d bf       	out	0x3d, r24	; 61
	}
}
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	08 95       	ret

00000398 <StringToHex>:
		ID_St_Buffer = 0;
	}
}

void	StringToHex(u8 *str ,u8 * _Received_He_Buffer)
{
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
     3aa:	8b 01       	movw	r16, r22
     3ac:	94 e1       	ldi	r25, 0x14	; 20
     3ae:	91 50       	subi	r25, 0x01	; 1
	u8 local_counter = 0;
	for (u8 i =0;i<20;i++)
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <StringToHex+0x16>
     3b2:	f8 01       	movw	r30, r16
     3b4:	10 82       	st	Z, r1
	{
		_Received_He_Buffer[local_counter] = 0;
	}
	while(str[local_counter] != '\0')
     3b6:	98 81       	ld	r25, Y
     3b8:	99 23       	and	r25, r25
     3ba:	09 f4       	brne	.+2      	; 0x3be <StringToHex+0x26>
     3bc:	6c c0       	rjmp	.+216    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
				
			case 'F':
				_Received_He_Buffer[local_counter] = 0xF;
				break;
			case 'f':
				_Received_He_Buffer[local_counter] = 0xF;
     3c4:	0f 2e       	mov	r0, r31
     3c6:	ff e0       	ldi	r31, 0x0F	; 15
     3c8:	cf 2e       	mov	r12, r31
     3ca:	f0 2d       	mov	r31, r0
				
			case 'E':
				_Received_He_Buffer[local_counter] = 0xE;
				break;
			case 'e':
				_Received_He_Buffer[local_counter] = 0xE;
     3cc:	0f 2e       	mov	r0, r31
     3ce:	fe e0       	ldi	r31, 0x0E	; 14
     3d0:	df 2e       	mov	r13, r31
     3d2:	f0 2d       	mov	r31, r0
				
			case 'D':
				_Received_He_Buffer[local_counter] = 0xD;
				break;
			case 'd':
				_Received_He_Buffer[local_counter] = 0xD;
     3d4:	0f 2e       	mov	r0, r31
     3d6:	fd e0       	ldi	r31, 0x0D	; 13
     3d8:	ef 2e       	mov	r14, r31
     3da:	f0 2d       	mov	r31, r0
				
			case 'C':
				_Received_He_Buffer[local_counter] = 0xC;
				break;
			case 'c':
				_Received_He_Buffer[local_counter] = 0xC;
     3dc:	0f 2e       	mov	r0, r31
     3de:	fc e0       	ldi	r31, 0x0C	; 12
     3e0:	ff 2e       	mov	r15, r31
     3e2:	f0 2d       	mov	r31, r0
				
			case 'B':
				_Received_He_Buffer[local_counter] = 0xB;
				break;
			case 'b':
				_Received_He_Buffer[local_counter] = 0xB;
     3e4:	bb e0       	ldi	r27, 0x0B	; 11
		{
			case 'A':
				_Received_He_Buffer[local_counter] = 0xA;
				break;
			case 'a':
				_Received_He_Buffer[local_counter] = 0xA;
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
	{
		_Received_He_Buffer[local_counter] = 0;
	}
	while(str[local_counter] != '\0')
	{
		switch(str[local_counter])
     3e8:	49 2f       	mov	r20, r25
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	fa 01       	movw	r30, r20
     3ee:	e1 54       	subi	r30, 0x41	; 65
     3f0:	f1 09       	sbc	r31, r1
     3f2:	e6 32       	cpi	r30, 0x26	; 38
     3f4:	f1 05       	cpc	r31, r1
     3f6:	08 f0       	brcs	.+2      	; 0x3fa <StringToHex+0x62>
     3f8:	40 c0       	rjmp	.+128    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     3fa:	e6 5d       	subi	r30, 0xD6	; 214
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__tablejump2__>
		{
			case 'A':
				_Received_He_Buffer[local_counter] = 0xA;
     402:	f8 01       	movw	r30, r16
     404:	e2 0f       	add	r30, r18
     406:	f3 1f       	adc	r31, r19
     408:	80 83       	st	Z, r24
				break;
     40a:	3c c0       	rjmp	.+120    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'a':
				_Received_He_Buffer[local_counter] = 0xA;
     40c:	f8 01       	movw	r30, r16
     40e:	e2 0f       	add	r30, r18
     410:	f3 1f       	adc	r31, r19
     412:	80 83       	st	Z, r24
				break;
     414:	37 c0       	rjmp	.+110    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			case 'B':
				_Received_He_Buffer[local_counter] = 0xB;
     416:	f8 01       	movw	r30, r16
     418:	e2 0f       	add	r30, r18
     41a:	f3 1f       	adc	r31, r19
     41c:	b0 83       	st	Z, r27
				break;
     41e:	32 c0       	rjmp	.+100    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'b':
				_Received_He_Buffer[local_counter] = 0xB;
     420:	f8 01       	movw	r30, r16
     422:	e2 0f       	add	r30, r18
     424:	f3 1f       	adc	r31, r19
     426:	b0 83       	st	Z, r27
				break;
     428:	2d c0       	rjmp	.+90     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			case 'C':
				_Received_He_Buffer[local_counter] = 0xC;
     42a:	f8 01       	movw	r30, r16
     42c:	e2 0f       	add	r30, r18
     42e:	f3 1f       	adc	r31, r19
     430:	f0 82       	st	Z, r15
				break;
     432:	28 c0       	rjmp	.+80     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'c':
				_Received_He_Buffer[local_counter] = 0xC;
     434:	f8 01       	movw	r30, r16
     436:	e2 0f       	add	r30, r18
     438:	f3 1f       	adc	r31, r19
     43a:	f0 82       	st	Z, r15
				break;
     43c:	23 c0       	rjmp	.+70     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			case 'D':
				_Received_He_Buffer[local_counter] = 0xD;
     43e:	f8 01       	movw	r30, r16
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	e0 82       	st	Z, r14
				break;
     446:	1e c0       	rjmp	.+60     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'd':
				_Received_He_Buffer[local_counter] = 0xD;
     448:	f8 01       	movw	r30, r16
     44a:	e2 0f       	add	r30, r18
     44c:	f3 1f       	adc	r31, r19
     44e:	e0 82       	st	Z, r14
				break;
     450:	19 c0       	rjmp	.+50     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			case 'E':
				_Received_He_Buffer[local_counter] = 0xE;
     452:	f8 01       	movw	r30, r16
     454:	e2 0f       	add	r30, r18
     456:	f3 1f       	adc	r31, r19
     458:	d0 82       	st	Z, r13
				break;
     45a:	14 c0       	rjmp	.+40     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'e':
				_Received_He_Buffer[local_counter] = 0xE;
     45c:	f8 01       	movw	r30, r16
     45e:	e2 0f       	add	r30, r18
     460:	f3 1f       	adc	r31, r19
     462:	d0 82       	st	Z, r13
				break;
     464:	0f c0       	rjmp	.+30     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			case 'F':
				_Received_He_Buffer[local_counter] = 0xF;
     466:	f8 01       	movw	r30, r16
     468:	e2 0f       	add	r30, r18
     46a:	f3 1f       	adc	r31, r19
     46c:	c0 82       	st	Z, r12
				break;
     46e:	0a c0       	rjmp	.+20     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			case 'f':
				_Received_He_Buffer[local_counter] = 0xF;
     470:	f8 01       	movw	r30, r16
     472:	e2 0f       	add	r30, r18
     474:	f3 1f       	adc	r31, r19
     476:	c0 82       	st	Z, r12
				break;
     478:	05 c0       	rjmp	.+10     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				
			default:
				_Received_He_Buffer[local_counter] = str[local_counter]-'0';
     47a:	f8 01       	movw	r30, r16
     47c:	e2 0f       	add	r30, r18
     47e:	f3 1f       	adc	r31, r19
     480:	90 53       	subi	r25, 0x30	; 48
     482:	90 83       	st	Z, r25
				break;
		}
		local_counter++;
     484:	af 5f       	subi	r26, 0xFF	; 255
	u8 local_counter = 0;
	for (u8 i =0;i<20;i++)
	{
		_Received_He_Buffer[local_counter] = 0;
	}
	while(str[local_counter] != '\0')
     486:	2a 2f       	mov	r18, r26
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	fe 01       	movw	r30, r28
     48c:	e2 0f       	add	r30, r18
     48e:	f3 1f       	adc	r31, r19
     490:	90 81       	ld	r25, Z
     492:	91 11       	cpse	r25, r1
     494:	a9 cf       	rjmp	.-174    	; 0x3e8 <StringToHex+0x50>
				_Received_He_Buffer[local_counter] = str[local_counter]-'0';
				break;
		}
		local_counter++;
	}
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	08 95       	ret

000004a8 <SendSeed>:


void	SendSeed(void)
{
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <SendSeed+0xc>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	10 e0       	ldi	r17, 0x00	; 0
	for(u8 i = 0; i<4 ; i++)
	{ 
		randomNum[i] = TIMER0_voidGetTCNT();
		HashSeed[i]  = randomNum[i] ^ 0x35;
     4bc:	0f 2e       	mov	r0, r31
     4be:	f5 e3       	ldi	r31, 0x35	; 53
     4c0:	ff 2e       	mov	r15, r31
     4c2:	f0 2d       	mov	r31, r0

void	SendSeed(void)
{
	for(u8 i = 0; i<4 ; i++)
	{ 
		randomNum[i] = TIMER0_voidGetTCNT();
     4c4:	0e 94 49 05 	call	0xa92	; 0xa92 <TIMER0_voidGetTCNT>
     4c8:	f8 01       	movw	r30, r16
     4ca:	ec 53       	subi	r30, 0x3C	; 60
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	80 83       	st	Z, r24
		HashSeed[i]  = randomNum[i] ^ 0x35;
     4d0:	80 81       	ld	r24, Z
     4d2:	8f 25       	eor	r24, r15
     4d4:	f8 01       	movw	r30, r16
     4d6:	e0 54       	subi	r30, 0x40	; 64
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	80 83       	st	Z, r24
     4dc:	88 ee       	ldi	r24, 0xE8	; 232
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	01 97       	sbiw	r24, 0x01	; 1
		for(u16 a =0; a<1000; a++);
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <SendSeed+0x38>
     4e4:	0f 5f       	subi	r16, 0xFF	; 255
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
}


void	SendSeed(void)
{
	for(u8 i = 0; i<4 ; i++)
     4e8:	04 30       	cpi	r16, 0x04	; 4
     4ea:	11 05       	cpc	r17, r1
     4ec:	59 f7       	brne	.-42     	; 0x4c4 <SendSeed+0x1c>
		randomNum[i] = TIMER0_voidGetTCNT();
		HashSeed[i]  = randomNum[i] ^ 0x35;
		for(u16 a =0; a<1000; a++);
	}
	
	USART_Transmit_String("6701",'\0',5);
     4ee:	45 e0       	ldi	r20, 0x05	; 5
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	8f e7       	ldi	r24, 0x7F	; 127
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     4fa:	00 e0       	ldi	r16, 0x00	; 0
     4fc:	10 e0       	ldi	r17, 0x00	; 0
	u8 buffer[2];
	for (u8 i =0; i<4; i++)
	{
		decimalToHex(randomNum[i],buffer);
     4fe:	f8 01       	movw	r30, r16
     500:	ec 53       	subi	r30, 0x3C	; 60
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	80 81       	ld	r24, Z
     506:	be 01       	movw	r22, r28
     508:	6f 5f       	subi	r22, 0xFF	; 255
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	0e 94 8a 01 	call	0x314	; 0x314 <decimalToHex>
		USART_Transmit_String(buffer,'\0',2);
     510:	42 e0       	ldi	r20, 0x02	; 2
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
		LCD_WriteString(buffer);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
     524:	0f 5f       	subi	r16, 0xFF	; 255
     526:	1f 4f       	sbci	r17, 0xFF	; 255
		for(u16 a =0; a<1000; a++);
	}
	
	USART_Transmit_String("6701",'\0',5);
	u8 buffer[2];
	for (u8 i =0; i<4; i++)
     528:	04 30       	cpi	r16, 0x04	; 4
     52a:	11 05       	cpc	r17, r1
     52c:	41 f7       	brne	.-48     	; 0x4fe <SendSeed+0x56>
	{
		decimalToHex(randomNum[i],buffer);
		USART_Transmit_String(buffer,'\0',2);
		LCD_WriteString(buffer);
	}
	LCD_GoTo_xy(1,0);
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_GoTo_xy>
     536:	00 e0       	ldi	r16, 0x00	; 0
     538:	10 e0       	ldi	r17, 0x00	; 0
	for (u8 i =0; i<4; i++)
	{	decimalToHex(HashSeed[i],buffer);
     53a:	f8 01       	movw	r30, r16
     53c:	e0 54       	subi	r30, 0x40	; 64
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	80 81       	ld	r24, Z
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	0e 94 8a 01 	call	0x314	; 0x314 <decimalToHex>
		LCD_WriteString(buffer);
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
     554:	0f 5f       	subi	r16, 0xFF	; 255
     556:	1f 4f       	sbci	r17, 0xFF	; 255
		decimalToHex(randomNum[i],buffer);
		USART_Transmit_String(buffer,'\0',2);
		LCD_WriteString(buffer);
	}
	LCD_GoTo_xy(1,0);
	for (u8 i =0; i<4; i++)
     558:	04 30       	cpi	r16, 0x04	; 4
     55a:	11 05       	cpc	r17, r1
     55c:	71 f7       	brne	.-36     	; 0x53a <SendSeed+0x92>
	{	decimalToHex(HashSeed[i],buffer);
		LCD_WriteString(buffer);
	}
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	08 95       	ret

0000056e <CheckSeed>:


u8	CheckSeed(void)
{
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <CheckSeed+0xe>
     57c:	1f 92       	push	r1
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	80 e7       	ldi	r24, 0x70	; 112
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <CheckSeed+0x1a>
     590:	00 c0       	rjmp	.+0      	; 0x592 <CheckSeed+0x24>
     592:	00 00       	nop
	u8 Local_Flag = 0;
	u8 local_buffer[4];
	u8 buffer[3];
	
	_delay_ms(100);
	LCD_GoTo_xy(3,0);
     594:	60 e0       	ldi	r22, 0x00	; 0
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_GoTo_xy>
     59c:	04 e0       	ldi	r16, 0x04	; 4
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	e1 2c       	mov	r14, r1
     5a2:	f1 2c       	mov	r15, r1
	for(u8 i=0,j=0; i<4 ; i++,j+=2)
	{
		decimalToHex(HashSeed[i],buffer);
     5a4:	f7 01       	movw	r30, r14
     5a6:	e0 54       	subi	r30, 0x40	; 64
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	80 81       	ld	r24, Z
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	0e 94 8a 01 	call	0x314	; 0x314 <decimalToHex>
		for(u8 a=0;a<2; a++)
		{
			if ( buffer[a] == Received_St_Buffer[4+j+a] )
     5b6:	f8 01       	movw	r30, r16
     5b8:	e2 52       	subi	r30, 0x22	; 34
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
     5bc:	80 81       	ld	r24, Z
     5be:	99 81       	ldd	r25, Y+1	; 0x01
     5c0:	98 17       	cp	r25, r24
     5c2:	b1 f0       	breq	.+44     	; 0x5f0 <CheckSeed+0x82>
     5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <CheckSeed+0x76>
			{
				GPIO_SetValue_Pin(GPIO_PA6,HIGH);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	86 e1       	ldi	r24, 0x16	; 22
     5ca:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     5ce:	2f ef       	ldi	r18, 0xFF	; 255
     5d0:	e2 1a       	sub	r14, r18
     5d2:	f2 0a       	sbc	r15, r18
     5d4:	0e 5f       	subi	r16, 0xFE	; 254
     5d6:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 local_buffer[4];
	u8 buffer[3];
	
	_delay_ms(100);
	LCD_GoTo_xy(3,0);
	for(u8 i=0,j=0; i<4 ; i++,j+=2)
     5d8:	84 e0       	ldi	r24, 0x04	; 4
     5da:	e8 16       	cp	r14, r24
     5dc:	f1 04       	cpc	r15, r1
     5de:	11 f7       	brne	.-60     	; 0x5a4 <CheckSeed+0x36>
		for(u8 a=0;a<2; a++)
		{
			if ( buffer[a] == Received_St_Buffer[4+j+a] )
			{
				GPIO_SetValue_Pin(GPIO_PA6,HIGH);
				Local_Flag = 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	12 c0       	rjmp	.+36     	; 0x608 <CheckSeed+0x9a>
			}
			else
			{
				GPIO_SetValue_Pin(GPIO_PA6,LOW);
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	86 e1       	ldi	r24, 0x16	; 22
     5e8:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
		if(!Local_Flag)
		{
			break;
		}
	}
	return Local_Flag;
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <CheckSeed+0x9a>
		decimalToHex(HashSeed[i],buffer);
		for(u8 a=0;a<2; a++)
		{
			if ( buffer[a] == Received_St_Buffer[4+j+a] )
			{
				GPIO_SetValue_Pin(GPIO_PA6,HIGH);
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	86 e1       	ldi	r24, 0x16	; 22
     5f4:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
	for(u8 i=0,j=0; i<4 ; i++,j+=2)
	{
		decimalToHex(HashSeed[i],buffer);
		for(u8 a=0;a<2; a++)
		{
			if ( buffer[a] == Received_St_Buffer[4+j+a] )
     5f8:	f8 01       	movw	r30, r16
     5fa:	e1 52       	subi	r30, 0x21	; 33
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	80 81       	ld	r24, Z
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	98 17       	cp	r25, r24
     604:	01 f3       	breq	.-64     	; 0x5c6 <CheckSeed+0x58>
     606:	ee cf       	rjmp	.-36     	; 0x5e4 <CheckSeed+0x76>
		{
			break;
		}
	}
	return Local_Flag;
}
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <main>:
void	SendSeed(void);
u8		CheckSeed(void);

int main(void)
{
	GPIO_Init();
     61c:	0e 94 ac 04 	call	0x958	; 0x958 <GPIO_Init>
	LCD_Init();
     620:	0e 94 2f 01 	call	0x25e	; 0x25e <LCD_Init>
	USART_Init();
     624:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_Init>
	TIMER0_voidInit();
     628:	0e 94 3b 05 	call	0xa76	; 0xa76 <TIMER0_voidInit>
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	89 e6       	ldi	r24, 0x69	; 105
     630:	98 e1       	ldi	r25, 0x18	; 24
     632:	21 50       	subi	r18, 0x01	; 1
     634:	80 40       	sbci	r24, 0x00	; 0
     636:	90 40       	sbci	r25, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <main+0x16>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <main+0x20>
     63c:	00 00       	nop
	_delay_ms(1000);
	LCD_WriteString("    START APP  ");
     63e:	84 e8       	ldi	r24, 0x84	; 132
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
	USART_Transmit_String( "Send Request", '\0' , 20);
     646:	44 e1       	ldi	r20, 0x14	; 20
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	82 eb       	ldi	r24, 0xB2	; 178
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	89 e6       	ldi	r24, 0x69	; 105
     656:	98 e1       	ldi	r25, 0x18	; 24
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	80 40       	sbci	r24, 0x00	; 0
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x3c>
     660:	00 c0       	rjmp	.+0      	; 0x662 <main+0x46>
     662:	00 00       	nop
	_delay_ms(1000);
	LCD_ClearDisplay();
     664:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_ClearDisplay>
	TIMER0_voidStart();
     668:	0e 94 45 05 	call	0xa8a	; 0xa8a <TIMER0_voidStart>
     66c:	2f ef       	ldi	r18, 0xFF	; 255
     66e:	80 e7       	ldi	r24, 0x70	; 112
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	21 50       	subi	r18, 0x01	; 1
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	90 40       	sbci	r25, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <main+0x56>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <main+0x60>
     67c:	00 00       	nop
	while (1)
	{
		_delay_ms(100);
		LCD_GoTo_xy(0,0);
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_GoTo_xy>
		USART_Receive_String(&Received_St_Buffer,20);
     686:	64 e1       	ldi	r22, 0x14	; 20
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	8e ed       	ldi	r24, 0xDE	; 222
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <USART_Receive_String>
     692:	2f ef       	ldi	r18, 0xFF	; 255
     694:	84 e3       	ldi	r24, 0x34	; 52
     696:	9c e0       	ldi	r25, 0x0C	; 12
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	80 40       	sbci	r24, 0x00	; 0
     69c:	90 40       	sbci	r25, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x7c>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x86>
     6a2:	00 00       	nop
		_delay_ms(500);
		ID_St_Buffer = Received_St_Buffer[0];
     6a4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <Received_St_Buffer>
     6a8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <ID_St_Buffer>
		if (ID_St_Buffer != '0')
     6ac:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <ID_St_Buffer>
     6b0:	80 33       	cpi	r24, 0x30	; 48
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <main+0x9a>
     6b4:	d0 c0       	rjmp	.+416    	; 0x856 <main+0x23a>
		{
			LCD_WriteString(Received_St_Buffer);
     6b6:	8e ed       	ldi	r24, 0xDE	; 222
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
     6be:	2f ef       	ldi	r18, 0xFF	; 255
     6c0:	84 e3       	ldi	r24, 0x34	; 52
     6c2:	9c e0       	ldi	r25, 0x0C	; 12
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0xa8>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0xb2>
     6ce:	00 00       	nop
			_delay_ms(500);
			StringToHex(Received_St_Buffer,Received_He_Buffer);
     6d0:	6a ec       	ldi	r22, 0xCA	; 202
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	8e ed       	ldi	r24, 0xDE	; 222
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 cc 01 	call	0x398	; 0x398 <StringToHex>
			switch(ID_St_Buffer)
     6dc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <ID_St_Buffer>
     6e0:	82 33       	cpi	r24, 0x32	; 50
     6e2:	21 f0       	breq	.+8      	; 0x6ec <main+0xd0>
     6e4:	83 33       	cpi	r24, 0x33	; 51
     6e6:	09 f4       	brne	.+2      	; 0x6ea <main+0xce>
     6e8:	7a c0       	rjmp	.+244    	; 0x7de <main+0x1c2>
     6ea:	a9 c0       	rjmp	.+338    	; 0x83e <main+0x222>
			{
				case '2':
					if (Received_St_Buffer[1] == '7')
     6ec:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <Received_St_Buffer+0x1>
     6f0:	87 33       	cpi	r24, 0x37	; 55
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <main+0xda>
     6f4:	6d c0       	rjmp	.+218    	; 0x7d0 <main+0x1b4>
					{
						switch(Received_St_Buffer[3])
     6f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Received_St_Buffer+0x3>
     6fa:	81 33       	cpi	r24, 0x31	; 49
     6fc:	19 f0       	breq	.+6      	; 0x704 <main+0xe8>
     6fe:	82 33       	cpi	r24, 0x32	; 50
     700:	99 f0       	breq	.+38     	; 0x728 <main+0x10c>
     702:	9d c0       	rjmp	.+314    	; 0x83e <main+0x222>
						{
							case  '1':
								{
									LCD_ClearDisplay();
     704:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_ClearDisplay>
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	84 e3       	ldi	r24, 0x34	; 52
     70c:	9c e0       	ldi	r25, 0x0C	; 12
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <main+0xf2>
     716:	00 c0       	rjmp	.+0      	; 0x718 <main+0xfc>
     718:	00 00       	nop
									_delay_ms(500);
									LCD_WriteString("6701");
     71a:	8f e7       	ldi	r24, 0x7F	; 127
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
									SendSeed();
     722:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SendSeed>
									break;
     726:	8b c0       	rjmp	.+278    	; 0x83e <main+0x222>
								}
							case  '2':
								{
									Secure_FLAG = CheckSeed();
     728:	0e 94 b7 02 	call	0x56e	; 0x56e <CheckSeed>
     72c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <Secure_FLAG>
									
									USART_Transmit_String("6702",'\0',5);
     730:	45 e0       	ldi	r20, 0x05	; 5
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	84 e9       	ldi	r24, 0x94	; 148
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     73c:	c4 e0       	ldi	r28, 0x04	; 4
     73e:	d0 e0       	ldi	r29, 0x00	; 0
									for(u8 i = 0; i<8 ; i++)
									{
										USART_Transmit(Received_St_Buffer[4+i]);
     740:	fe 01       	movw	r30, r28
     742:	e2 52       	subi	r30, 0x22	; 34
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	80 81       	ld	r24, Z
     748:	0e 94 ad 05 	call	0xb5a	; 0xb5a <USART_Transmit>
     74c:	21 96       	adiw	r28, 0x01	; 1
							case  '2':
								{
									Secure_FLAG = CheckSeed();
									
									USART_Transmit_String("6702",'\0',5);
									for(u8 i = 0; i<8 ; i++)
     74e:	cc 30       	cpi	r28, 0x0C	; 12
     750:	d1 05       	cpc	r29, r1
     752:	b1 f7       	brne	.-20     	; 0x740 <main+0x124>
									{
										USART_Transmit(Received_St_Buffer[4+i]);
									}
									
									if (Secure_FLAG)
     754:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Secure_FLAG>
     758:	88 23       	and	r24, r24
     75a:	11 f1       	breq	.+68     	; 0x7a0 <main+0x184>
									{
										LCD_ClearDisplay();
     75c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_ClearDisplay>
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	84 e3       	ldi	r24, 0x34	; 52
     764:	9c e0       	ldi	r25, 0x0C	; 12
     766:	21 50       	subi	r18, 0x01	; 1
     768:	80 40       	sbci	r24, 0x00	; 0
     76a:	90 40       	sbci	r25, 0x00	; 0
     76c:	e1 f7       	brne	.-8      	; 0x766 <main+0x14a>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0x154>
     770:	00 00       	nop
										_delay_ms(500);
										LCD_WriteString("6702");
     772:	84 e9       	ldi	r24, 0x94	; 148
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
										USART_Transmit_String("6702",'\0',5);
     77a:	45 e0       	ldi	r20, 0x05	; 5
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	84 e9       	ldi	r24, 0x94	; 148
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     786:	c4 e0       	ldi	r28, 0x04	; 4
     788:	d0 e0       	ldi	r29, 0x00	; 0
										for(u8 i = 0; i<8 ; i++)
										{
											LCD_WriteChar(Received_St_Buffer[4+i]); 
     78a:	fe 01       	movw	r30, r28
     78c:	e2 52       	subi	r30, 0x22	; 34
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	80 81       	ld	r24, Z
     792:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WriteChar>
     796:	21 96       	adiw	r28, 0x01	; 1
									{
										LCD_ClearDisplay();
										_delay_ms(500);
										LCD_WriteString("6702");
										USART_Transmit_String("6702",'\0',5);
										for(u8 i = 0; i<8 ; i++)
     798:	cc 30       	cpi	r28, 0x0C	; 12
     79a:	d1 05       	cpc	r29, r1
     79c:	b1 f7       	brne	.-20     	; 0x78a <main+0x16e>
     79e:	4f c0       	rjmp	.+158    	; 0x83e <main+0x222>
											LCD_WriteChar(Received_St_Buffer[4+i]); 
										}
									}
									else
									{
										LCD_ClearDisplay();
     7a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_ClearDisplay>
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	84 e3       	ldi	r24, 0x34	; 52
     7a8:	9c e0       	ldi	r25, 0x0C	; 12
     7aa:	21 50       	subi	r18, 0x01	; 1
     7ac:	80 40       	sbci	r24, 0x00	; 0
     7ae:	90 40       	sbci	r25, 0x00	; 0
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <main+0x18e>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <main+0x198>
     7b4:	00 00       	nop
										_delay_ms(500);
										LCD_GoTo_xy(0,0);
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_GoTo_xy>
										LCD_WriteString("Security Key Error!");
     7be:	89 e9       	ldi	r24, 0x99	; 153
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LCD_WriteString>
										GPIO_SetValue_Pin(GPIO_PA5,HIGH);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	85 e1       	ldi	r24, 0x15	; 21
     7ca:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     7ce:	37 c0       	rjmp	.+110    	; 0x83e <main+0x222>
									break;
								}
						default:
							break;
						}
					} else { USART_Transmit_String( "Error\0", '\0' , 20); /* wrong message. */ }
     7d0:	44 e1       	ldi	r20, 0x14	; 20
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	80 e6       	ldi	r24, 0x60	; 96
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     7dc:	30 c0       	rjmp	.+96     	; 0x83e <main+0x222>
					break;
					
				case '3':
					if (Received_St_Buffer[1] == '1')
     7de:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <Received_St_Buffer+0x1>
     7e2:	81 33       	cpi	r24, 0x31	; 49
     7e4:	31 f5       	brne	.+76     	; 0x832 <main+0x216>
					{
						if (Secure_FLAG)
     7e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Secure_FLAG>
     7ea:	88 23       	and	r24, r24
     7ec:	d9 f0       	breq	.+54     	; 0x824 <main+0x208>
						{
							if (Received_He_Buffer[4] == 0xA && Received_He_Buffer[5] == 0xA && Received_He_Buffer[6] == 0 && Received_He_Buffer[7] == 0)
     7ee:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <Received_He_Buffer+0x4>
     7f2:	8a 30       	cpi	r24, 0x0A	; 10
     7f4:	21 f5       	brne	.+72     	; 0x83e <main+0x222>
     7f6:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Received_He_Buffer+0x5>
     7fa:	8a 30       	cpi	r24, 0x0A	; 10
     7fc:	01 f5       	brne	.+64     	; 0x83e <main+0x222>
     7fe:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <Received_He_Buffer+0x6>
     802:	81 11       	cpse	r24, r1
     804:	1c c0       	rjmp	.+56     	; 0x83e <main+0x222>
     806:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <Received_He_Buffer+0x7>
     80a:	81 11       	cpse	r24, r1
     80c:	18 c0       	rjmp	.+48     	; 0x83e <main+0x222>
							{
								USART_Transmit_String( "7101AA00\0", '\0' , 20); // positive response.
     80e:	44 e1       	ldi	r20, 0x14	; 20
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	87 e6       	ldi	r24, 0x67	; 103
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
								GPIO_SetValue_Pin(GPIO_PA7,HIGH);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	87 e1       	ldi	r24, 0x17	; 23
     81e:	0e 94 b6 04 	call	0x96c	; 0x96c <GPIO_SetValue_Pin>
     822:	0d c0       	rjmp	.+26     	; 0x83e <main+0x222>
							}
						}
						else
						{
							USART_Transmit_String( "NRC7F3135\0", '\0' , 20); // unsecured error message.
     824:	44 e1       	ldi	r20, 0x14	; 20
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	81 e7       	ldi	r24, 0x71	; 113
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
     830:	06 c0       	rjmp	.+12     	; 0x83e <main+0x222>
						}
					} else { USART_Transmit_String( "Error\0", '\0' , 20); /* wrong message. */}
     832:	44 e1       	ldi	r20, 0x14	; 20
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	80 e6       	ldi	r24, 0x60	; 96
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
					break;
					
				default:
					break;
			}
			USART_Transmit_String( "\r\n", '\0' , 3);
     83e:	43 e0       	ldi	r20, 0x03	; 3
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	8d ea       	ldi	r24, 0xAD	; 173
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
			USART_Transmit_String( "\r\nSend Request", '\0' , 20);
     84a:	44 e1       	ldi	r20, 0x14	; 20
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	80 eb       	ldi	r24, 0xB0	; 176
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Transmit_String>
		}
		ID_St_Buffer = 0;
     856:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <ID_St_Buffer>
	}
     85a:	08 cf       	rjmp	.-496    	; 0x66c <main+0x50>

0000085c <__vector_1>:

// ISR_FUNCTION:-
/*------------------------------------------------------------------------*/
void __vector_1(void)
    __attribute__((signal, used, externally_visible)); // to avoid optimization
void __vector_1(void) {
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	0f 92       	push	r0
     864:	11 24       	eor	r1, r1
     866:	2f 93       	push	r18
     868:	3f 93       	push	r19
     86a:	4f 93       	push	r20
     86c:	5f 93       	push	r21
     86e:	6f 93       	push	r22
     870:	7f 93       	push	r23
     872:	8f 93       	push	r24
     874:	9f 93       	push	r25
     876:	af 93       	push	r26
     878:	bf 93       	push	r27
     87a:	ef 93       	push	r30
     87c:	ff 93       	push	r31
  EXTI_0_CALLBACK();
     87e:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <EXTI_0_CALLBACK>
     882:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <EXTI_0_CALLBACK+0x1>
     886:	09 95       	icall
  SET_BIT(*GIFR, INTF0);
     888:	8a b7       	in	r24, 0x3a	; 58
     88a:	80 64       	ori	r24, 0x40	; 64
     88c:	8a bf       	out	0x3a, r24	; 58
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_2>:
/*------------------------------------------------------------------------*/
void __vector_2(void)
    __attribute__((signal, used, externally_visible)); // to avoid optmization
void __vector_2(void) {
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
  EXTI_1_CALLBACK();
     8d2:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <EXTI_1_CALLBACK>
     8d6:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <EXTI_1_CALLBACK+0x1>
     8da:	09 95       	icall
  SET_BIT(*GIFR, INTF1);
     8dc:	8a b7       	in	r24, 0x3a	; 58
     8de:	80 68       	ori	r24, 0x80	; 128
     8e0:	8a bf       	out	0x3a, r24	; 58
}
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <__vector_3>:
/*------------------------------------------------------------------------*/
void __vector_3(void)
    __attribute__((signal, used, externally_visible)); // to avoid optmization
void __vector_3(void) {
     904:	1f 92       	push	r1
     906:	0f 92       	push	r0
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	0f 92       	push	r0
     90c:	11 24       	eor	r1, r1
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
  EXTI_2_CALLBACK();
     926:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <EXTI_2_CALLBACK>
     92a:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <EXTI_2_CALLBACK+0x1>
     92e:	09 95       	icall
  SET_BIT(*GIFR, INTF2);
     930:	8a b7       	in	r24, 0x3a	; 58
     932:	80 62       	ori	r24, 0x20	; 32
     934:	8a bf       	out	0x3a, r24	; 58
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <GPIO_Init>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_Init(void) {
  DDRA->Port = (u8)PORTA_DIRECTION;
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	8a bb       	out	0x1a, r24	; 26
  DDRB->Port = (u8)PORTB_DIRECTION;
     95c:	8f eb       	ldi	r24, 0xBF	; 191
     95e:	87 bb       	out	0x17, r24	; 23
  DDRC->Port = (u8)PORTC_DIRECTION;
     960:	8c e3       	ldi	r24, 0x3C	; 60
     962:	84 bb       	out	0x14, r24	; 20
  DDRD->Port = (u8)PORTD_DIRECTION;
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	81 bb       	out	0x11, r24	; 17
  return GPIO_OK;
}
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	08 95       	ret

0000096c <GPIO_SetValue_Pin>:
/// @brief
/// @param
/// @return
/*______________________________________________________________________*/
GPIO_Fun_Status GPIO_SetValue_Pin(u8 Pin, GPIO_OUTPUT_TYPE Output_Type) {
  u8 pin_num = Pin & (0b00001111);
     96c:	28 2f       	mov	r18, r24
     96e:	2f 70       	andi	r18, 0x0F	; 15
  u8 port_num = ((Pin & (0b11110000)) >> 4);
  // u8 *Location;
  switch (port_num) {
     970:	82 95       	swap	r24
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	39 f1       	breq	.+78     	; 0x9c6 <GPIO_SetValue_Pin+0x5a>
     978:	18 f4       	brcc	.+6      	; 0x980 <GPIO_SetValue_Pin+0x14>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	39 f0       	breq	.+14     	; 0x98c <GPIO_SetValue_Pin+0x20>
     97e:	79 c0       	rjmp	.+242    	; 0xa72 <GPIO_SetValue_Pin+0x106>
     980:	83 30       	cpi	r24, 0x03	; 3
     982:	f1 f1       	breq	.+124    	; 0xa00 <GPIO_SetValue_Pin+0x94>
     984:	84 30       	cpi	r24, 0x04	; 4
     986:	09 f4       	brne	.+2      	; 0x98a <GPIO_SetValue_Pin+0x1e>
     988:	58 c0       	rjmp	.+176    	; 0xa3a <GPIO_SetValue_Pin+0xce>
     98a:	73 c0       	rjmp	.+230    	; 0xa72 <GPIO_SetValue_Pin+0x106>
  case 1:
    // Location = (u8 *)(&(PORTA->BITS) + pin_num);
    CLR_BIT(PORTA->Port, pin_num);
     98c:	3b b3       	in	r19, 0x1b	; 27
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 2e       	mov	r0, r18
     994:	02 c0       	rjmp	.+4      	; 0x99a <GPIO_SetValue_Pin+0x2e>
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <GPIO_SetValue_Pin+0x2a>
     99e:	48 2f       	mov	r20, r24
     9a0:	40 95       	com	r20
     9a2:	34 23       	and	r19, r20
     9a4:	3b bb       	out	0x1b, r19	; 27
    if (Output_Type == TOGG) {
     9a6:	62 30       	cpi	r22, 0x02	; 2
     9a8:	21 f4       	brne	.+8      	; 0x9b2 <GPIO_SetValue_Pin+0x46>
      //*Location = ~(*Location);
	  TOG_BIT((PORTA->Port),(pin_num));
     9aa:	9b b3       	in	r25, 0x1b	; 27
     9ac:	89 27       	eor	r24, r25
     9ae:	8b bb       	out	0x1b, r24	; 27
     9b0:	60 c0       	rjmp	.+192    	; 0xa72 <GPIO_SetValue_Pin+0x106>
      //(PORTA->Port) ^= (1 << (pin_num));
    } else {
      //*Location = Output_Type;
      (PORTA->Port) |= (Output_Type << (pin_num));
     9b2:	8b b3       	in	r24, 0x1b	; 27
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <GPIO_SetValue_Pin+0x50>
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	2a 95       	dec	r18
     9be:	e2 f7       	brpl	.-8      	; 0x9b8 <GPIO_SetValue_Pin+0x4c>
     9c0:	68 2b       	or	r22, r24
     9c2:	6b bb       	out	0x1b, r22	; 27
     9c4:	56 c0       	rjmp	.+172    	; 0xa72 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 2:
    // Location = (u8 *)(&(PORTB->BITS) + pin_num);
    CLR_BIT(PORTB->Port, pin_num);
     9c6:	38 b3       	in	r19, 0x18	; 24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 2e       	mov	r0, r18
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <GPIO_SetValue_Pin+0x68>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	0a 94       	dec	r0
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <GPIO_SetValue_Pin+0x64>
     9d8:	48 2f       	mov	r20, r24
     9da:	40 95       	com	r20
     9dc:	34 23       	and	r19, r20
     9de:	38 bb       	out	0x18, r19	; 24
    if (Output_Type == TOGG) {
     9e0:	62 30       	cpi	r22, 0x02	; 2
     9e2:	21 f4       	brne	.+8      	; 0x9ec <GPIO_SetValue_Pin+0x80>
      //*Location = ~(*Location);
      (PORTB->Port) ^= (1 << (pin_num));
     9e4:	98 b3       	in	r25, 0x18	; 24
     9e6:	89 27       	eor	r24, r25
     9e8:	88 bb       	out	0x18, r24	; 24
     9ea:	43 c0       	rjmp	.+134    	; 0xa72 <GPIO_SetValue_Pin+0x106>
    } else {
      //*Location = Output_Type;
      (PORTB->Port) |= (Output_Type << (pin_num));
     9ec:	88 b3       	in	r24, 0x18	; 24
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <GPIO_SetValue_Pin+0x8a>
     9f2:	66 0f       	add	r22, r22
     9f4:	77 1f       	adc	r23, r23
     9f6:	2a 95       	dec	r18
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <GPIO_SetValue_Pin+0x86>
     9fa:	68 2b       	or	r22, r24
     9fc:	68 bb       	out	0x18, r22	; 24
     9fe:	39 c0       	rjmp	.+114    	; 0xa72 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 3:
    // Location = (u8 *)(&(PORTC->BITS) + pin_num);
    CLR_BIT(PORTC->Port, pin_num);
     a00:	35 b3       	in	r19, 0x15	; 21
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 2e       	mov	r0, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <GPIO_SetValue_Pin+0xa2>
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <GPIO_SetValue_Pin+0x9e>
     a12:	48 2f       	mov	r20, r24
     a14:	40 95       	com	r20
     a16:	34 23       	and	r19, r20
     a18:	35 bb       	out	0x15, r19	; 21
    if (Output_Type == TOGG) {
     a1a:	62 30       	cpi	r22, 0x02	; 2
     a1c:	21 f4       	brne	.+8      	; 0xa26 <GPIO_SetValue_Pin+0xba>
      // *Location = ~(*Location);
      (PORTC->Port) ^= (1 << (pin_num));
     a1e:	95 b3       	in	r25, 0x15	; 21
     a20:	89 27       	eor	r24, r25
     a22:	85 bb       	out	0x15, r24	; 21
     a24:	26 c0       	rjmp	.+76     	; 0xa72 <GPIO_SetValue_Pin+0x106>
    } else {
      // *Location = Output_Type;
      (PORTC->Port) |= (Output_Type << (pin_num));
     a26:	85 b3       	in	r24, 0x15	; 21
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <GPIO_SetValue_Pin+0xc4>
     a2c:	66 0f       	add	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	2a 95       	dec	r18
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <GPIO_SetValue_Pin+0xc0>
     a34:	68 2b       	or	r22, r24
     a36:	65 bb       	out	0x15, r22	; 21
     a38:	1c c0       	rjmp	.+56     	; 0xa72 <GPIO_SetValue_Pin+0x106>
    }
    break;
  case 4:
    // Location = (u8 *)(&(PORTD->BITS) + pin_num);
    CLR_BIT(PORTD->Port, pin_num);
     a3a:	32 b3       	in	r19, 0x12	; 18
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	02 2e       	mov	r0, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <GPIO_SetValue_Pin+0xdc>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	0a 94       	dec	r0
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <GPIO_SetValue_Pin+0xd8>
     a4c:	48 2f       	mov	r20, r24
     a4e:	40 95       	com	r20
     a50:	34 23       	and	r19, r20
     a52:	32 bb       	out	0x12, r19	; 18
    if (Output_Type == TOGG) {
     a54:	62 30       	cpi	r22, 0x02	; 2
     a56:	21 f4       	brne	.+8      	; 0xa60 <GPIO_SetValue_Pin+0xf4>
      // *Location = ~(*Location);
      (PORTD->Port) ^= (1 << (pin_num));
     a58:	92 b3       	in	r25, 0x12	; 18
     a5a:	89 27       	eor	r24, r25
     a5c:	82 bb       	out	0x12, r24	; 18
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <GPIO_SetValue_Pin+0x106>
    } else {
      // *Location = Output_Type;
      (PORTD->Port) |= (Output_Type << (pin_num));
     a60:	82 b3       	in	r24, 0x12	; 18
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <GPIO_SetValue_Pin+0xfe>
     a66:	66 0f       	add	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	2a 95       	dec	r18
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <GPIO_SetValue_Pin+0xfa>
     a6e:	68 2b       	or	r22, r24
     a70:	62 bb       	out	0x12, r22	; 18
    break;
  default:
    break;
  }
  return GPIO_OK;
}
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	08 95       	ret

00000a76 <TIMER0_voidInit>:
	TIMER0_COMP_CALLBACK = ptr;
}

void	TIMER0_voidSet_OVF_CallBack( void (*ptr)(void) )
{
	TIMER0_OVF_CALLBACK = ptr;
     a76:	13 be       	out	0x33, r1	; 51
     a78:	12 be       	out	0x32, r1	; 50
     a7a:	1c be       	out	0x3c, r1	; 60
     a7c:	83 b7       	in	r24, 0x33	; 51
     a7e:	83 bf       	out	0x33, r24	; 51
     a80:	83 b7       	in	r24, 0x33	; 51
     a82:	83 bf       	out	0x33, r24	; 51
     a84:	83 b7       	in	r24, 0x33	; 51
     a86:	83 bf       	out	0x33, r24	; 51
     a88:	08 95       	ret

00000a8a <TIMER0_voidStart>:
     a8a:	83 b7       	in	r24, 0x33	; 51
     a8c:	83 60       	ori	r24, 0x03	; 3
     a8e:	83 bf       	out	0x33, r24	; 51
     a90:	08 95       	ret

00000a92 <TIMER0_voidGetTCNT>:
     a92:	82 b7       	in	r24, 0x32	; 50
     a94:	08 95       	ret

00000a96 <__vector_10>:
}

void __vector_10(void) 
__attribute__((signal, used, externally_visible)); // to avoid optimization (TIMER0 COMP ISR)
void __vector_10(void) {
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
	TIMER0_COMP_CALLBACK();
     ab8:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <TIMER0_COMP_CALLBACK>
     abc:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <TIMER0_COMP_CALLBACK+0x1>
     ac0:	09 95       	icall
}
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	0f 90       	pop	r0
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	0f 90       	pop	r0
     ae0:	1f 90       	pop	r1
     ae2:	18 95       	reti

00000ae4 <__vector_11>:

void __vector_11(void)
__attribute__((signal, used, externally_visible)); // to avoid optimization (TIMER0 OVF ISR)
void __vector_11(void) {
     ae4:	1f 92       	push	r1
     ae6:	0f 92       	push	r0
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	0f 92       	push	r0
     aec:	11 24       	eor	r1, r1
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
	TIMER0_OVF_CALLBACK();
     b06:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <TIMER0_OVF_CALLBACK>
     b0a:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <TIMER0_OVF_CALLBACK+0x1>
     b0e:	09 95       	icall
}
     b10:	ff 91       	pop	r31
     b12:	ef 91       	pop	r30
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	0f 90       	pop	r0
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	0f 90       	pop	r0
     b2e:	1f 90       	pop	r1
     b30:	18 95       	reti

00000b32 <USART_Init>:
			break;
		case TC_COMPLETE_INT:
			UART_TX_COMP_CALLBACK = ptr;
			break;
		case DATA_REG_EMPTY :
			UART_UDR_EMPTY_CALLBACK = ptr;
     b32:	1b b8       	out	0x0b, r1	; 11
     b34:	8b b1       	in	r24, 0x0b	; 11
     b36:	8b b9       	out	0x0b, r24	; 11
     b38:	80 e8       	ldi	r24, 0x80	; 128
     b3a:	80 bd       	out	0x20, r24	; 32
     b3c:	80 b5       	in	r24, 0x20	; 32
     b3e:	80 bd       	out	0x20, r24	; 32
     b40:	80 b5       	in	r24, 0x20	; 32
     b42:	80 bd       	out	0x20, r24	; 32
     b44:	80 b5       	in	r24, 0x20	; 32
     b46:	80 bd       	out	0x20, r24	; 32
     b48:	80 b5       	in	r24, 0x20	; 32
     b4a:	86 60       	ori	r24, 0x06	; 6
     b4c:	80 bd       	out	0x20, r24	; 32
     b4e:	1a b8       	out	0x0a, r1	; 10
     b50:	53 9a       	sbi	0x0a, 3	; 10
     b52:	54 9a       	sbi	0x0a, 4	; 10
     b54:	83 e3       	ldi	r24, 0x33	; 51
     b56:	89 b9       	out	0x09, r24	; 9
     b58:	08 95       	ret

00000b5a <USART_Transmit>:
     b5a:	5d 9b       	sbis	0x0b, 5	; 11
     b5c:	fe cf       	rjmp	.-4      	; 0xb5a <USART_Transmit>
     b5e:	9c b1       	in	r25, 0x0c	; 12
     b60:	8c b9       	out	0x0c, r24	; 12
     b62:	08 95       	ret

00000b64 <USART_Transmit_String>:
     b64:	ef 92       	push	r14
     b66:	ff 92       	push	r15
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	1f 92       	push	r1
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	29 81       	ldd	r18, Y+1	; 0x01
     b7a:	fc 01       	movw	r30, r24
     b7c:	e2 0f       	add	r30, r18
     b7e:	f1 1d       	adc	r31, r1
     b80:	20 81       	ld	r18, Z
     b82:	62 17       	cp	r22, r18
     b84:	d1 f0       	breq	.+52     	; 0xbba <USART_Transmit_String+0x56>
     b86:	e4 2e       	mov	r14, r20
     b88:	f6 2e       	mov	r15, r22
     b8a:	8c 01       	movw	r16, r24
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	84 17       	cp	r24, r20
     b90:	a0 f4       	brcc	.+40     	; 0xbba <USART_Transmit_String+0x56>
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	f8 01       	movw	r30, r16
     b96:	e8 0f       	add	r30, r24
     b98:	f1 1d       	adc	r31, r1
     b9a:	80 81       	ld	r24, Z
     b9c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <USART_Transmit>
     ba0:	99 81       	ldd	r25, Y+1	; 0x01
     ba2:	9f 5f       	subi	r25, 0xFF	; 255
     ba4:	99 83       	std	Y+1, r25	; 0x01
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	f8 01       	movw	r30, r16
     baa:	e8 0f       	add	r30, r24
     bac:	f1 1d       	adc	r31, r1
     bae:	80 81       	ld	r24, Z
     bb0:	8f 15       	cp	r24, r15
     bb2:	19 f0       	breq	.+6      	; 0xbba <USART_Transmit_String+0x56>
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	8e 15       	cp	r24, r14
     bb8:	60 f3       	brcs	.-40     	; 0xb92 <USART_Transmit_String+0x2e>
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	08 95       	ret

00000bca <USART_Receive>:
     bca:	5f 9b       	sbis	0x0b, 7	; 11
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <USART_Receive>
     bce:	8c b1       	in	r24, 0x0c	; 12
     bd0:	08 95       	ret

00000bd2 <USART_Receive_String>:
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	6c 01       	movw	r12, r24
     be4:	7b 01       	movw	r14, r22
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	e8 1a       	sub	r14, r24
     bea:	f1 08       	sbc	r15, r1
     bec:	89 f0       	breq	.+34     	; 0xc10 <USART_Receive_String+0x3e>
     bee:	86 01       	movw	r16, r12
     bf0:	c0 e0       	ldi	r28, 0x00	; 0
     bf2:	d0 e0       	ldi	r29, 0x00	; 0
     bf4:	0e 94 e5 05 	call	0xbca	; 0xbca <USART_Receive>
     bf8:	8d 30       	cpi	r24, 0x0D	; 13
     bfa:	61 f0       	breq	.+24     	; 0xc14 <USART_Receive_String+0x42>
     bfc:	8a 30       	cpi	r24, 0x0A	; 10
     bfe:	51 f0       	breq	.+20     	; 0xc14 <USART_Receive_String+0x42>
     c00:	f8 01       	movw	r30, r16
     c02:	81 93       	st	Z+, r24
     c04:	8f 01       	movw	r16, r30
     c06:	21 96       	adiw	r28, 0x01	; 1
     c08:	ce 15       	cp	r28, r14
     c0a:	df 05       	cpc	r29, r15
     c0c:	98 f3       	brcs	.-26     	; 0xbf4 <USART_Receive_String+0x22>
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <USART_Receive_String+0x42>
     c10:	c0 e0       	ldi	r28, 0x00	; 0
     c12:	d0 e0       	ldi	r29, 0x00	; 0
     c14:	cc 0d       	add	r28, r12
     c16:	dd 1d       	adc	r29, r13
     c18:	18 82       	st	Y, r1
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <__vector_13>:



void __vector_13(void) __attribute__((signal, used, externally_visible)); // to avoid optimization (TIMER0 OVF ISR)
void __vector_13(void)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	UART_RX_COMP_CALLBACK();
     c4e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <UART_RX_COMP_CALLBACK>
     c52:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <UART_RX_COMP_CALLBACK+0x1>
     c56:	09 95       	icall
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__vector_14>:

void __vector_14(void) __attribute__((signal, used, externally_visible)); // to avoid optimization (TIMER0 OVF ISR)
void __vector_14(void)
{
     c7a:	1f 92       	push	r1
     c7c:	0f 92       	push	r0
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	UART_TX_COMP_CALLBACK();
     c9c:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <UART_TX_COMP_CALLBACK>
     ca0:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <UART_TX_COMP_CALLBACK+0x1>
     ca4:	09 95       	icall
}
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	0f 90       	pop	r0
     cc4:	1f 90       	pop	r1
     cc6:	18 95       	reti

00000cc8 <__vector_15>:

void __vector_15(void) __attribute__((signal, used, externally_visible)); // to avoid optimization (TIMER0 OVF ISR)
void __vector_15(void)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
	UART_UDR_EMPTY_CALLBACK();
     cea:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <UART_UDR_EMPTY_CALLBACK>
     cee:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <UART_UDR_EMPTY_CALLBACK+0x1>
     cf2:	09 95       	icall
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__tablejump2__>:
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	05 90       	lpm	r0, Z+
     d1c:	f4 91       	lpm	r31, Z
     d1e:	e0 2d       	mov	r30, r0
     d20:	09 94       	ijmp

00000d22 <sprintf>:
     d22:	ae e0       	ldi	r26, 0x0E	; 14
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e9       	ldi	r30, 0x97	; 151
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__prologue_saves__+0x1c>
     d2e:	0d 89       	ldd	r16, Y+21	; 0x15
     d30:	1e 89       	ldd	r17, Y+22	; 0x16
     d32:	86 e0       	ldi	r24, 0x06	; 6
     d34:	8c 83       	std	Y+4, r24	; 0x04
     d36:	1a 83       	std	Y+2, r17	; 0x02
     d38:	09 83       	std	Y+1, r16	; 0x01
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	9f e7       	ldi	r25, 0x7F	; 127
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	ae 01       	movw	r20, r28
     d44:	47 5e       	subi	r20, 0xE7	; 231
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	6f 89       	ldd	r22, Y+23	; 0x17
     d4a:	78 8d       	ldd	r23, Y+24	; 0x18
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	0e 94 b3 06 	call	0xd66	; 0xd66 <vfprintf>
     d54:	ef 81       	ldd	r30, Y+7	; 0x07
     d56:	f8 85       	ldd	r31, Y+8	; 0x08
     d58:	e0 0f       	add	r30, r16
     d5a:	f1 1f       	adc	r31, r17
     d5c:	10 82       	st	Z, r1
     d5e:	2e 96       	adiw	r28, 0x0e	; 14
     d60:	e4 e0       	ldi	r30, 0x04	; 4
     d62:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__epilogue_restores__+0x1c>

00000d66 <vfprintf>:
     d66:	ab e0       	ldi	r26, 0x0B	; 11
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e9 eb       	ldi	r30, 0xB9	; 185
     d6c:	f6 e0       	ldi	r31, 0x06	; 6
     d6e:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__prologue_saves__>
     d72:	6c 01       	movw	r12, r24
     d74:	7b 01       	movw	r14, r22
     d76:	8a 01       	movw	r16, r20
     d78:	fc 01       	movw	r30, r24
     d7a:	17 82       	std	Z+7, r1	; 0x07
     d7c:	16 82       	std	Z+6, r1	; 0x06
     d7e:	83 81       	ldd	r24, Z+3	; 0x03
     d80:	81 ff       	sbrs	r24, 1
     d82:	cc c1       	rjmp	.+920    	; 0x111c <vfprintf+0x3b6>
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	3c 01       	movw	r6, r24
     d8a:	f6 01       	movw	r30, r12
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	f7 01       	movw	r30, r14
     d90:	93 fd       	sbrc	r25, 3
     d92:	85 91       	lpm	r24, Z+
     d94:	93 ff       	sbrs	r25, 3
     d96:	81 91       	ld	r24, Z+
     d98:	7f 01       	movw	r14, r30
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <vfprintf+0x3a>
     d9e:	ba c1       	rjmp	.+884    	; 0x1114 <vfprintf+0x3ae>
     da0:	85 32       	cpi	r24, 0x25	; 37
     da2:	39 f4       	brne	.+14     	; 0xdb2 <vfprintf+0x4c>
     da4:	93 fd       	sbrc	r25, 3
     da6:	85 91       	lpm	r24, Z+
     da8:	93 ff       	sbrs	r25, 3
     daa:	81 91       	ld	r24, Z+
     dac:	7f 01       	movw	r14, r30
     dae:	85 32       	cpi	r24, 0x25	; 37
     db0:	29 f4       	brne	.+10     	; 0xdbc <vfprintf+0x56>
     db2:	b6 01       	movw	r22, r12
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
     dba:	e7 cf       	rjmp	.-50     	; 0xd8a <vfprintf+0x24>
     dbc:	91 2c       	mov	r9, r1
     dbe:	21 2c       	mov	r2, r1
     dc0:	31 2c       	mov	r3, r1
     dc2:	ff e1       	ldi	r31, 0x1F	; 31
     dc4:	f3 15       	cp	r31, r3
     dc6:	d8 f0       	brcs	.+54     	; 0xdfe <vfprintf+0x98>
     dc8:	8b 32       	cpi	r24, 0x2B	; 43
     dca:	79 f0       	breq	.+30     	; 0xdea <vfprintf+0x84>
     dcc:	38 f4       	brcc	.+14     	; 0xddc <vfprintf+0x76>
     dce:	80 32       	cpi	r24, 0x20	; 32
     dd0:	79 f0       	breq	.+30     	; 0xdf0 <vfprintf+0x8a>
     dd2:	83 32       	cpi	r24, 0x23	; 35
     dd4:	a1 f4       	brne	.+40     	; 0xdfe <vfprintf+0x98>
     dd6:	23 2d       	mov	r18, r3
     dd8:	20 61       	ori	r18, 0x10	; 16
     dda:	1d c0       	rjmp	.+58     	; 0xe16 <vfprintf+0xb0>
     ddc:	8d 32       	cpi	r24, 0x2D	; 45
     dde:	61 f0       	breq	.+24     	; 0xdf8 <vfprintf+0x92>
     de0:	80 33       	cpi	r24, 0x30	; 48
     de2:	69 f4       	brne	.+26     	; 0xdfe <vfprintf+0x98>
     de4:	23 2d       	mov	r18, r3
     de6:	21 60       	ori	r18, 0x01	; 1
     de8:	16 c0       	rjmp	.+44     	; 0xe16 <vfprintf+0xb0>
     dea:	83 2d       	mov	r24, r3
     dec:	82 60       	ori	r24, 0x02	; 2
     dee:	38 2e       	mov	r3, r24
     df0:	e3 2d       	mov	r30, r3
     df2:	e4 60       	ori	r30, 0x04	; 4
     df4:	3e 2e       	mov	r3, r30
     df6:	2a c0       	rjmp	.+84     	; 0xe4c <vfprintf+0xe6>
     df8:	f3 2d       	mov	r31, r3
     dfa:	f8 60       	ori	r31, 0x08	; 8
     dfc:	1d c0       	rjmp	.+58     	; 0xe38 <vfprintf+0xd2>
     dfe:	37 fc       	sbrc	r3, 7
     e00:	2d c0       	rjmp	.+90     	; 0xe5c <vfprintf+0xf6>
     e02:	20 ed       	ldi	r18, 0xD0	; 208
     e04:	28 0f       	add	r18, r24
     e06:	2a 30       	cpi	r18, 0x0A	; 10
     e08:	40 f0       	brcs	.+16     	; 0xe1a <vfprintf+0xb4>
     e0a:	8e 32       	cpi	r24, 0x2E	; 46
     e0c:	b9 f4       	brne	.+46     	; 0xe3c <vfprintf+0xd6>
     e0e:	36 fc       	sbrc	r3, 6
     e10:	81 c1       	rjmp	.+770    	; 0x1114 <vfprintf+0x3ae>
     e12:	23 2d       	mov	r18, r3
     e14:	20 64       	ori	r18, 0x40	; 64
     e16:	32 2e       	mov	r3, r18
     e18:	19 c0       	rjmp	.+50     	; 0xe4c <vfprintf+0xe6>
     e1a:	36 fe       	sbrs	r3, 6
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0xc4>
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	98 9e       	mul	r9, r24
     e22:	20 0d       	add	r18, r0
     e24:	11 24       	eor	r1, r1
     e26:	92 2e       	mov	r9, r18
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <vfprintf+0xe6>
     e2a:	ea e0       	ldi	r30, 0x0A	; 10
     e2c:	2e 9e       	mul	r2, r30
     e2e:	20 0d       	add	r18, r0
     e30:	11 24       	eor	r1, r1
     e32:	22 2e       	mov	r2, r18
     e34:	f3 2d       	mov	r31, r3
     e36:	f0 62       	ori	r31, 0x20	; 32
     e38:	3f 2e       	mov	r3, r31
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <vfprintf+0xe6>
     e3c:	8c 36       	cpi	r24, 0x6C	; 108
     e3e:	21 f4       	brne	.+8      	; 0xe48 <vfprintf+0xe2>
     e40:	83 2d       	mov	r24, r3
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	38 2e       	mov	r3, r24
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <vfprintf+0xe6>
     e48:	88 36       	cpi	r24, 0x68	; 104
     e4a:	41 f4       	brne	.+16     	; 0xe5c <vfprintf+0xf6>
     e4c:	f7 01       	movw	r30, r14
     e4e:	93 fd       	sbrc	r25, 3
     e50:	85 91       	lpm	r24, Z+
     e52:	93 ff       	sbrs	r25, 3
     e54:	81 91       	ld	r24, Z+
     e56:	7f 01       	movw	r14, r30
     e58:	81 11       	cpse	r24, r1
     e5a:	b3 cf       	rjmp	.-154    	; 0xdc2 <vfprintf+0x5c>
     e5c:	98 2f       	mov	r25, r24
     e5e:	9f 7d       	andi	r25, 0xDF	; 223
     e60:	95 54       	subi	r25, 0x45	; 69
     e62:	93 30       	cpi	r25, 0x03	; 3
     e64:	28 f4       	brcc	.+10     	; 0xe70 <vfprintf+0x10a>
     e66:	0c 5f       	subi	r16, 0xFC	; 252
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	9f e3       	ldi	r25, 0x3F	; 63
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <vfprintf+0x124>
     e70:	83 36       	cpi	r24, 0x63	; 99
     e72:	31 f0       	breq	.+12     	; 0xe80 <vfprintf+0x11a>
     e74:	83 37       	cpi	r24, 0x73	; 115
     e76:	71 f0       	breq	.+28     	; 0xe94 <vfprintf+0x12e>
     e78:	83 35       	cpi	r24, 0x53	; 83
     e7a:	09 f0       	breq	.+2      	; 0xe7e <vfprintf+0x118>
     e7c:	59 c0       	rjmp	.+178    	; 0xf30 <vfprintf+0x1ca>
     e7e:	21 c0       	rjmp	.+66     	; 0xec2 <vfprintf+0x15c>
     e80:	f8 01       	movw	r30, r16
     e82:	80 81       	ld	r24, Z
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	0e 5f       	subi	r16, 0xFE	; 254
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	88 24       	eor	r8, r8
     e8c:	83 94       	inc	r8
     e8e:	91 2c       	mov	r9, r1
     e90:	53 01       	movw	r10, r6
     e92:	13 c0       	rjmp	.+38     	; 0xeba <vfprintf+0x154>
     e94:	28 01       	movw	r4, r16
     e96:	f2 e0       	ldi	r31, 0x02	; 2
     e98:	4f 0e       	add	r4, r31
     e9a:	51 1c       	adc	r5, r1
     e9c:	f8 01       	movw	r30, r16
     e9e:	a0 80       	ld	r10, Z
     ea0:	b1 80       	ldd	r11, Z+1	; 0x01
     ea2:	36 fe       	sbrs	r3, 6
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <vfprintf+0x146>
     ea6:	69 2d       	mov	r22, r9
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x14a>
     eac:	6f ef       	ldi	r22, 0xFF	; 255
     eae:	7f ef       	ldi	r23, 0xFF	; 255
     eb0:	c5 01       	movw	r24, r10
     eb2:	0e 94 9f 08 	call	0x113e	; 0x113e <strnlen>
     eb6:	4c 01       	movw	r8, r24
     eb8:	82 01       	movw	r16, r4
     eba:	f3 2d       	mov	r31, r3
     ebc:	ff 77       	andi	r31, 0x7F	; 127
     ebe:	3f 2e       	mov	r3, r31
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <vfprintf+0x188>
     ec2:	28 01       	movw	r4, r16
     ec4:	22 e0       	ldi	r18, 0x02	; 2
     ec6:	42 0e       	add	r4, r18
     ec8:	51 1c       	adc	r5, r1
     eca:	f8 01       	movw	r30, r16
     ecc:	a0 80       	ld	r10, Z
     ece:	b1 80       	ldd	r11, Z+1	; 0x01
     ed0:	36 fe       	sbrs	r3, 6
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x174>
     ed4:	69 2d       	mov	r22, r9
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x178>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	c5 01       	movw	r24, r10
     ee0:	0e 94 94 08 	call	0x1128	; 0x1128 <strnlen_P>
     ee4:	4c 01       	movw	r8, r24
     ee6:	f3 2d       	mov	r31, r3
     ee8:	f0 68       	ori	r31, 0x80	; 128
     eea:	3f 2e       	mov	r3, r31
     eec:	82 01       	movw	r16, r4
     eee:	33 fc       	sbrc	r3, 3
     ef0:	1b c0       	rjmp	.+54     	; 0xf28 <vfprintf+0x1c2>
     ef2:	82 2d       	mov	r24, r2
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	88 16       	cp	r8, r24
     ef8:	99 06       	cpc	r9, r25
     efa:	b0 f4       	brcc	.+44     	; 0xf28 <vfprintf+0x1c2>
     efc:	b6 01       	movw	r22, r12
     efe:	80 e2       	ldi	r24, 0x20	; 32
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
     f06:	2a 94       	dec	r2
     f08:	f4 cf       	rjmp	.-24     	; 0xef2 <vfprintf+0x18c>
     f0a:	f5 01       	movw	r30, r10
     f0c:	37 fc       	sbrc	r3, 7
     f0e:	85 91       	lpm	r24, Z+
     f10:	37 fe       	sbrs	r3, 7
     f12:	81 91       	ld	r24, Z+
     f14:	5f 01       	movw	r10, r30
     f16:	b6 01       	movw	r22, r12
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
     f1e:	21 10       	cpse	r2, r1
     f20:	2a 94       	dec	r2
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	82 1a       	sub	r8, r18
     f26:	91 08       	sbc	r9, r1
     f28:	81 14       	cp	r8, r1
     f2a:	91 04       	cpc	r9, r1
     f2c:	71 f7       	brne	.-36     	; 0xf0a <vfprintf+0x1a4>
     f2e:	e8 c0       	rjmp	.+464    	; 0x1100 <vfprintf+0x39a>
     f30:	84 36       	cpi	r24, 0x64	; 100
     f32:	11 f0       	breq	.+4      	; 0xf38 <vfprintf+0x1d2>
     f34:	89 36       	cpi	r24, 0x69	; 105
     f36:	41 f5       	brne	.+80     	; 0xf88 <vfprintf+0x222>
     f38:	f8 01       	movw	r30, r16
     f3a:	37 fe       	sbrs	r3, 7
     f3c:	07 c0       	rjmp	.+14     	; 0xf4c <vfprintf+0x1e6>
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	0c 5f       	subi	r16, 0xFC	; 252
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <vfprintf+0x1f6>
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	07 2e       	mov	r0, r23
     f52:	00 0c       	add	r0, r0
     f54:	88 0b       	sbc	r24, r24
     f56:	99 0b       	sbc	r25, r25
     f58:	0e 5f       	subi	r16, 0xFE	; 254
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	f3 2d       	mov	r31, r3
     f5e:	ff 76       	andi	r31, 0x6F	; 111
     f60:	3f 2e       	mov	r3, r31
     f62:	97 ff       	sbrs	r25, 7
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <vfprintf+0x212>
     f66:	90 95       	com	r25
     f68:	80 95       	com	r24
     f6a:	70 95       	com	r23
     f6c:	61 95       	neg	r22
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	f0 68       	ori	r31, 0x80	; 128
     f76:	3f 2e       	mov	r3, r31
     f78:	2a e0       	ldi	r18, 0x0A	; 10
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	a3 01       	movw	r20, r6
     f7e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__ultoa_invert>
     f82:	88 2e       	mov	r8, r24
     f84:	86 18       	sub	r8, r6
     f86:	45 c0       	rjmp	.+138    	; 0x1012 <vfprintf+0x2ac>
     f88:	85 37       	cpi	r24, 0x75	; 117
     f8a:	31 f4       	brne	.+12     	; 0xf98 <vfprintf+0x232>
     f8c:	23 2d       	mov	r18, r3
     f8e:	2f 7e       	andi	r18, 0xEF	; 239
     f90:	b2 2e       	mov	r11, r18
     f92:	2a e0       	ldi	r18, 0x0A	; 10
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	25 c0       	rjmp	.+74     	; 0xfe2 <vfprintf+0x27c>
     f98:	93 2d       	mov	r25, r3
     f9a:	99 7f       	andi	r25, 0xF9	; 249
     f9c:	b9 2e       	mov	r11, r25
     f9e:	8f 36       	cpi	r24, 0x6F	; 111
     fa0:	c1 f0       	breq	.+48     	; 0xfd2 <vfprintf+0x26c>
     fa2:	18 f4       	brcc	.+6      	; 0xfaa <vfprintf+0x244>
     fa4:	88 35       	cpi	r24, 0x58	; 88
     fa6:	79 f0       	breq	.+30     	; 0xfc6 <vfprintf+0x260>
     fa8:	b5 c0       	rjmp	.+362    	; 0x1114 <vfprintf+0x3ae>
     faa:	80 37       	cpi	r24, 0x70	; 112
     fac:	19 f0       	breq	.+6      	; 0xfb4 <vfprintf+0x24e>
     fae:	88 37       	cpi	r24, 0x78	; 120
     fb0:	21 f0       	breq	.+8      	; 0xfba <vfprintf+0x254>
     fb2:	b0 c0       	rjmp	.+352    	; 0x1114 <vfprintf+0x3ae>
     fb4:	e9 2f       	mov	r30, r25
     fb6:	e0 61       	ori	r30, 0x10	; 16
     fb8:	be 2e       	mov	r11, r30
     fba:	b4 fe       	sbrs	r11, 4
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <vfprintf+0x272>
     fbe:	fb 2d       	mov	r31, r11
     fc0:	f4 60       	ori	r31, 0x04	; 4
     fc2:	bf 2e       	mov	r11, r31
     fc4:	09 c0       	rjmp	.+18     	; 0xfd8 <vfprintf+0x272>
     fc6:	34 fe       	sbrs	r3, 4
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <vfprintf+0x278>
     fca:	29 2f       	mov	r18, r25
     fcc:	26 60       	ori	r18, 0x06	; 6
     fce:	b2 2e       	mov	r11, r18
     fd0:	06 c0       	rjmp	.+12     	; 0xfde <vfprintf+0x278>
     fd2:	28 e0       	ldi	r18, 0x08	; 8
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <vfprintf+0x27c>
     fd8:	20 e1       	ldi	r18, 0x10	; 16
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <vfprintf+0x27c>
     fde:	20 e1       	ldi	r18, 0x10	; 16
     fe0:	32 e0       	ldi	r19, 0x02	; 2
     fe2:	f8 01       	movw	r30, r16
     fe4:	b7 fe       	sbrs	r11, 7
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <vfprintf+0x290>
     fe8:	60 81       	ld	r22, Z
     fea:	71 81       	ldd	r23, Z+1	; 0x01
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	0c 5f       	subi	r16, 0xFC	; 252
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0x29c>
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 5f       	subi	r16, 0xFE	; 254
    1000:	1f 4f       	sbci	r17, 0xFF	; 255
    1002:	a3 01       	movw	r20, r6
    1004:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__ultoa_invert>
    1008:	88 2e       	mov	r8, r24
    100a:	86 18       	sub	r8, r6
    100c:	fb 2d       	mov	r31, r11
    100e:	ff 77       	andi	r31, 0x7F	; 127
    1010:	3f 2e       	mov	r3, r31
    1012:	36 fe       	sbrs	r3, 6
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <vfprintf+0x2ca>
    1016:	23 2d       	mov	r18, r3
    1018:	2e 7f       	andi	r18, 0xFE	; 254
    101a:	a2 2e       	mov	r10, r18
    101c:	89 14       	cp	r8, r9
    101e:	58 f4       	brcc	.+22     	; 0x1036 <vfprintf+0x2d0>
    1020:	34 fe       	sbrs	r3, 4
    1022:	0b c0       	rjmp	.+22     	; 0x103a <vfprintf+0x2d4>
    1024:	32 fc       	sbrc	r3, 2
    1026:	09 c0       	rjmp	.+18     	; 0x103a <vfprintf+0x2d4>
    1028:	83 2d       	mov	r24, r3
    102a:	8e 7e       	andi	r24, 0xEE	; 238
    102c:	a8 2e       	mov	r10, r24
    102e:	05 c0       	rjmp	.+10     	; 0x103a <vfprintf+0x2d4>
    1030:	b8 2c       	mov	r11, r8
    1032:	a3 2c       	mov	r10, r3
    1034:	03 c0       	rjmp	.+6      	; 0x103c <vfprintf+0x2d6>
    1036:	b8 2c       	mov	r11, r8
    1038:	01 c0       	rjmp	.+2      	; 0x103c <vfprintf+0x2d6>
    103a:	b9 2c       	mov	r11, r9
    103c:	a4 fe       	sbrs	r10, 4
    103e:	0f c0       	rjmp	.+30     	; 0x105e <vfprintf+0x2f8>
    1040:	fe 01       	movw	r30, r28
    1042:	e8 0d       	add	r30, r8
    1044:	f1 1d       	adc	r31, r1
    1046:	80 81       	ld	r24, Z
    1048:	80 33       	cpi	r24, 0x30	; 48
    104a:	21 f4       	brne	.+8      	; 0x1054 <vfprintf+0x2ee>
    104c:	9a 2d       	mov	r25, r10
    104e:	99 7e       	andi	r25, 0xE9	; 233
    1050:	a9 2e       	mov	r10, r25
    1052:	09 c0       	rjmp	.+18     	; 0x1066 <vfprintf+0x300>
    1054:	a2 fe       	sbrs	r10, 2
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <vfprintf+0x2fe>
    1058:	b3 94       	inc	r11
    105a:	b3 94       	inc	r11
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <vfprintf+0x300>
    105e:	8a 2d       	mov	r24, r10
    1060:	86 78       	andi	r24, 0x86	; 134
    1062:	09 f0       	breq	.+2      	; 0x1066 <vfprintf+0x300>
    1064:	b3 94       	inc	r11
    1066:	a3 fc       	sbrc	r10, 3
    1068:	11 c0       	rjmp	.+34     	; 0x108c <vfprintf+0x326>
    106a:	a0 fe       	sbrs	r10, 0
    106c:	06 c0       	rjmp	.+12     	; 0x107a <vfprintf+0x314>
    106e:	b2 14       	cp	r11, r2
    1070:	88 f4       	brcc	.+34     	; 0x1094 <vfprintf+0x32e>
    1072:	28 0c       	add	r2, r8
    1074:	92 2c       	mov	r9, r2
    1076:	9b 18       	sub	r9, r11
    1078:	0e c0       	rjmp	.+28     	; 0x1096 <vfprintf+0x330>
    107a:	b2 14       	cp	r11, r2
    107c:	60 f4       	brcc	.+24     	; 0x1096 <vfprintf+0x330>
    107e:	b6 01       	movw	r22, r12
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    1088:	b3 94       	inc	r11
    108a:	f7 cf       	rjmp	.-18     	; 0x107a <vfprintf+0x314>
    108c:	b2 14       	cp	r11, r2
    108e:	18 f4       	brcc	.+6      	; 0x1096 <vfprintf+0x330>
    1090:	2b 18       	sub	r2, r11
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <vfprintf+0x332>
    1094:	98 2c       	mov	r9, r8
    1096:	21 2c       	mov	r2, r1
    1098:	a4 fe       	sbrs	r10, 4
    109a:	10 c0       	rjmp	.+32     	; 0x10bc <vfprintf+0x356>
    109c:	b6 01       	movw	r22, r12
    109e:	80 e3       	ldi	r24, 0x30	; 48
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    10a6:	a2 fe       	sbrs	r10, 2
    10a8:	17 c0       	rjmp	.+46     	; 0x10d8 <vfprintf+0x372>
    10aa:	a1 fc       	sbrc	r10, 1
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <vfprintf+0x34e>
    10ae:	88 e7       	ldi	r24, 0x78	; 120
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <vfprintf+0x352>
    10b4:	88 e5       	ldi	r24, 0x58	; 88
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	b6 01       	movw	r22, r12
    10ba:	0c c0       	rjmp	.+24     	; 0x10d4 <vfprintf+0x36e>
    10bc:	8a 2d       	mov	r24, r10
    10be:	86 78       	andi	r24, 0x86	; 134
    10c0:	59 f0       	breq	.+22     	; 0x10d8 <vfprintf+0x372>
    10c2:	a1 fe       	sbrs	r10, 1
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0x364>
    10c6:	8b e2       	ldi	r24, 0x2B	; 43
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <vfprintf+0x366>
    10ca:	80 e2       	ldi	r24, 0x20	; 32
    10cc:	a7 fc       	sbrc	r10, 7
    10ce:	8d e2       	ldi	r24, 0x2D	; 45
    10d0:	b6 01       	movw	r22, r12
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    10d8:	89 14       	cp	r8, r9
    10da:	38 f4       	brcc	.+14     	; 0x10ea <vfprintf+0x384>
    10dc:	b6 01       	movw	r22, r12
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    10e6:	9a 94       	dec	r9
    10e8:	f7 cf       	rjmp	.-18     	; 0x10d8 <vfprintf+0x372>
    10ea:	8a 94       	dec	r8
    10ec:	f3 01       	movw	r30, r6
    10ee:	e8 0d       	add	r30, r8
    10f0:	f1 1d       	adc	r31, r1
    10f2:	80 81       	ld	r24, Z
    10f4:	b6 01       	movw	r22, r12
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    10fc:	81 10       	cpse	r8, r1
    10fe:	f5 cf       	rjmp	.-22     	; 0x10ea <vfprintf+0x384>
    1100:	22 20       	and	r2, r2
    1102:	09 f4       	brne	.+2      	; 0x1106 <vfprintf+0x3a0>
    1104:	42 ce       	rjmp	.-892    	; 0xd8a <vfprintf+0x24>
    1106:	b6 01       	movw	r22, r12
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 aa 08 	call	0x1154	; 0x1154 <fputc>
    1110:	2a 94       	dec	r2
    1112:	f6 cf       	rjmp	.-20     	; 0x1100 <vfprintf+0x39a>
    1114:	f6 01       	movw	r30, r12
    1116:	86 81       	ldd	r24, Z+6	; 0x06
    1118:	97 81       	ldd	r25, Z+7	; 0x07
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <vfprintf+0x3ba>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	2b 96       	adiw	r28, 0x0b	; 11
    1122:	e2 e1       	ldi	r30, 0x12	; 18
    1124:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__epilogue_restores__>

00001128 <strnlen_P>:
    1128:	fc 01       	movw	r30, r24
    112a:	05 90       	lpm	r0, Z+
    112c:	61 50       	subi	r22, 0x01	; 1
    112e:	70 40       	sbci	r23, 0x00	; 0
    1130:	01 10       	cpse	r0, r1
    1132:	d8 f7       	brcc	.-10     	; 0x112a <strnlen_P+0x2>
    1134:	80 95       	com	r24
    1136:	90 95       	com	r25
    1138:	8e 0f       	add	r24, r30
    113a:	9f 1f       	adc	r25, r31
    113c:	08 95       	ret

0000113e <strnlen>:
    113e:	fc 01       	movw	r30, r24
    1140:	61 50       	subi	r22, 0x01	; 1
    1142:	70 40       	sbci	r23, 0x00	; 0
    1144:	01 90       	ld	r0, Z+
    1146:	01 10       	cpse	r0, r1
    1148:	d8 f7       	brcc	.-10     	; 0x1140 <strnlen+0x2>
    114a:	80 95       	com	r24
    114c:	90 95       	com	r25
    114e:	8e 0f       	add	r24, r30
    1150:	9f 1f       	adc	r25, r31
    1152:	08 95       	ret

00001154 <fputc>:
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	fb 01       	movw	r30, r22
    115e:	23 81       	ldd	r18, Z+3	; 0x03
    1160:	21 fd       	sbrc	r18, 1
    1162:	03 c0       	rjmp	.+6      	; 0x116a <fputc+0x16>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	9f ef       	ldi	r25, 0xFF	; 255
    1168:	2c c0       	rjmp	.+88     	; 0x11c2 <fputc+0x6e>
    116a:	22 ff       	sbrs	r18, 2
    116c:	16 c0       	rjmp	.+44     	; 0x119a <fputc+0x46>
    116e:	46 81       	ldd	r20, Z+6	; 0x06
    1170:	57 81       	ldd	r21, Z+7	; 0x07
    1172:	24 81       	ldd	r18, Z+4	; 0x04
    1174:	35 81       	ldd	r19, Z+5	; 0x05
    1176:	42 17       	cp	r20, r18
    1178:	53 07       	cpc	r21, r19
    117a:	44 f4       	brge	.+16     	; 0x118c <fputc+0x38>
    117c:	a0 81       	ld	r26, Z
    117e:	b1 81       	ldd	r27, Z+1	; 0x01
    1180:	9d 01       	movw	r18, r26
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	31 83       	std	Z+1, r19	; 0x01
    1188:	20 83       	st	Z, r18
    118a:	8c 93       	st	X, r24
    118c:	26 81       	ldd	r18, Z+6	; 0x06
    118e:	37 81       	ldd	r19, Z+7	; 0x07
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	37 83       	std	Z+7, r19	; 0x07
    1196:	26 83       	std	Z+6, r18	; 0x06
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <fputc+0x6e>
    119a:	8b 01       	movw	r16, r22
    119c:	ec 01       	movw	r28, r24
    119e:	fb 01       	movw	r30, r22
    11a0:	00 84       	ldd	r0, Z+8	; 0x08
    11a2:	f1 85       	ldd	r31, Z+9	; 0x09
    11a4:	e0 2d       	mov	r30, r0
    11a6:	09 95       	icall
    11a8:	89 2b       	or	r24, r25
    11aa:	e1 f6       	brne	.-72     	; 0x1164 <fputc+0x10>
    11ac:	d8 01       	movw	r26, r16
    11ae:	16 96       	adiw	r26, 0x06	; 6
    11b0:	8d 91       	ld	r24, X+
    11b2:	9c 91       	ld	r25, X
    11b4:	17 97       	sbiw	r26, 0x07	; 7
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	17 96       	adiw	r26, 0x07	; 7
    11ba:	9c 93       	st	X, r25
    11bc:	8e 93       	st	-X, r24
    11be:	16 97       	sbiw	r26, 0x06	; 6
    11c0:	ce 01       	movw	r24, r28
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	08 95       	ret

000011cc <__ultoa_invert>:
    11cc:	fa 01       	movw	r30, r20
    11ce:	aa 27       	eor	r26, r26
    11d0:	28 30       	cpi	r18, 0x08	; 8
    11d2:	51 f1       	breq	.+84     	; 0x1228 <__ultoa_invert+0x5c>
    11d4:	20 31       	cpi	r18, 0x10	; 16
    11d6:	81 f1       	breq	.+96     	; 0x1238 <__ultoa_invert+0x6c>
    11d8:	e8 94       	clt
    11da:	6f 93       	push	r22
    11dc:	6e 7f       	andi	r22, 0xFE	; 254
    11de:	6e 5f       	subi	r22, 0xFE	; 254
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	8f 4f       	sbci	r24, 0xFF	; 255
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	af 4f       	sbci	r26, 0xFF	; 255
    11e8:	b1 e0       	ldi	r27, 0x01	; 1
    11ea:	3e d0       	rcall	.+124    	; 0x1268 <__ultoa_invert+0x9c>
    11ec:	b4 e0       	ldi	r27, 0x04	; 4
    11ee:	3c d0       	rcall	.+120    	; 0x1268 <__ultoa_invert+0x9c>
    11f0:	67 0f       	add	r22, r23
    11f2:	78 1f       	adc	r23, r24
    11f4:	89 1f       	adc	r24, r25
    11f6:	9a 1f       	adc	r25, r26
    11f8:	a1 1d       	adc	r26, r1
    11fa:	68 0f       	add	r22, r24
    11fc:	79 1f       	adc	r23, r25
    11fe:	8a 1f       	adc	r24, r26
    1200:	91 1d       	adc	r25, r1
    1202:	a1 1d       	adc	r26, r1
    1204:	6a 0f       	add	r22, r26
    1206:	71 1d       	adc	r23, r1
    1208:	81 1d       	adc	r24, r1
    120a:	91 1d       	adc	r25, r1
    120c:	a1 1d       	adc	r26, r1
    120e:	20 d0       	rcall	.+64     	; 0x1250 <__ultoa_invert+0x84>
    1210:	09 f4       	brne	.+2      	; 0x1214 <__ultoa_invert+0x48>
    1212:	68 94       	set
    1214:	3f 91       	pop	r19
    1216:	2a e0       	ldi	r18, 0x0A	; 10
    1218:	26 9f       	mul	r18, r22
    121a:	11 24       	eor	r1, r1
    121c:	30 19       	sub	r19, r0
    121e:	30 5d       	subi	r19, 0xD0	; 208
    1220:	31 93       	st	Z+, r19
    1222:	de f6       	brtc	.-74     	; 0x11da <__ultoa_invert+0xe>
    1224:	cf 01       	movw	r24, r30
    1226:	08 95       	ret
    1228:	46 2f       	mov	r20, r22
    122a:	47 70       	andi	r20, 0x07	; 7
    122c:	40 5d       	subi	r20, 0xD0	; 208
    122e:	41 93       	st	Z+, r20
    1230:	b3 e0       	ldi	r27, 0x03	; 3
    1232:	0f d0       	rcall	.+30     	; 0x1252 <__ultoa_invert+0x86>
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__ultoa_invert+0x5c>
    1236:	f6 cf       	rjmp	.-20     	; 0x1224 <__ultoa_invert+0x58>
    1238:	46 2f       	mov	r20, r22
    123a:	4f 70       	andi	r20, 0x0F	; 15
    123c:	40 5d       	subi	r20, 0xD0	; 208
    123e:	4a 33       	cpi	r20, 0x3A	; 58
    1240:	18 f0       	brcs	.+6      	; 0x1248 <__ultoa_invert+0x7c>
    1242:	49 5d       	subi	r20, 0xD9	; 217
    1244:	31 fd       	sbrc	r19, 1
    1246:	40 52       	subi	r20, 0x20	; 32
    1248:	41 93       	st	Z+, r20
    124a:	02 d0       	rcall	.+4      	; 0x1250 <__ultoa_invert+0x84>
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__ultoa_invert+0x6c>
    124e:	ea cf       	rjmp	.-44     	; 0x1224 <__ultoa_invert+0x58>
    1250:	b4 e0       	ldi	r27, 0x04	; 4
    1252:	a6 95       	lsr	r26
    1254:	97 95       	ror	r25
    1256:	87 95       	ror	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	ba 95       	dec	r27
    125e:	c9 f7       	brne	.-14     	; 0x1252 <__ultoa_invert+0x86>
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	61 05       	cpc	r22, r1
    1264:	71 05       	cpc	r23, r1
    1266:	08 95       	ret
    1268:	9b 01       	movw	r18, r22
    126a:	ac 01       	movw	r20, r24
    126c:	0a 2e       	mov	r0, r26
    126e:	06 94       	lsr	r0
    1270:	57 95       	ror	r21
    1272:	47 95       	ror	r20
    1274:	37 95       	ror	r19
    1276:	27 95       	ror	r18
    1278:	ba 95       	dec	r27
    127a:	c9 f7       	brne	.-14     	; 0x126e <__ultoa_invert+0xa2>
    127c:	62 0f       	add	r22, r18
    127e:	73 1f       	adc	r23, r19
    1280:	84 1f       	adc	r24, r20
    1282:	95 1f       	adc	r25, r21
    1284:	a0 1d       	adc	r26, r0
    1286:	08 95       	ret

00001288 <__prologue_saves__>:
    1288:	2f 92       	push	r2
    128a:	3f 92       	push	r3
    128c:	4f 92       	push	r4
    128e:	5f 92       	push	r5
    1290:	6f 92       	push	r6
    1292:	7f 92       	push	r7
    1294:	8f 92       	push	r8
    1296:	9f 92       	push	r9
    1298:	af 92       	push	r10
    129a:	bf 92       	push	r11
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	ca 1b       	sub	r28, r26
    12b2:	db 0b       	sbc	r29, r27
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	09 94       	ijmp

000012c0 <__epilogue_restores__>:
    12c0:	2a 88       	ldd	r2, Y+18	; 0x12
    12c2:	39 88       	ldd	r3, Y+17	; 0x11
    12c4:	48 88       	ldd	r4, Y+16	; 0x10
    12c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    12c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    12cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    12d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    12d2:	b9 84       	ldd	r11, Y+9	; 0x09
    12d4:	c8 84       	ldd	r12, Y+8	; 0x08
    12d6:	df 80       	ldd	r13, Y+7	; 0x07
    12d8:	ee 80       	ldd	r14, Y+6	; 0x06
    12da:	fd 80       	ldd	r15, Y+5	; 0x05
    12dc:	0c 81       	ldd	r16, Y+4	; 0x04
    12de:	1b 81       	ldd	r17, Y+3	; 0x03
    12e0:	aa 81       	ldd	r26, Y+2	; 0x02
    12e2:	b9 81       	ldd	r27, Y+1	; 0x01
    12e4:	ce 0f       	add	r28, r30
    12e6:	d1 1d       	adc	r29, r1
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	ed 01       	movw	r28, r26
    12f4:	08 95       	ret

000012f6 <_exit>:
    12f6:	f8 94       	cli

000012f8 <__stop_program>:
    12f8:	ff cf       	rjmp	.-2      	; 0x12f8 <__stop_program>
